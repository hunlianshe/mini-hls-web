"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Api = require("../../../service/api.service");
Page({
    data: {
        payInfo: {},
        userInfo: {},
        payItems: [
            {
                value: "wx",
                name: "微信支付",
                iconName: "wx",
                balance: "",
                checked: true,
            },
            {
                value: "yfb",
                name: "缘分币支付",
                iconName: "moneyRecharge",
                balance: 80,
                checked: false,
            },
        ],
        shooseType: "wx",
    },
    onLoad: function (options) {
        const user = wx.getStorageSync("userInfo");
        console.log("userInfo", user);
        let payItems = this.data.payItems;
        payItems[1] = Object.assign({}, payItems[1], { balance: user.coin || 0 });
        this.setData({
            userInfo: Object.assign({}, user),
            payItems,
        });
        console.log(`===options===`, options);
        if (options.payInfo) {
            this.setData({
                payInfo: JSON.parse(options.payInfo),
            });
        }
    },
    radioChange(e) {
        console.log("radio发生change事件，选择的支付方式为：", e.detail.value);
        const payItems = this.data.payItems;
        for (let i = 0, len = payItems.length; i < len; ++i) {
            payItems[i].checked = payItems[i].value === e.detail.value;
        }
        this.setData({
            payItems,
            shooseType: e.detail.value,
        });
    },
    goPay() {
        const { payInfo, shooseType, userInfo } = this.data;
        const coin = userInfo.coin || 0;
        console.log(`payInfo, shooseType`, shooseType);
        if (shooseType === "yfb" && coin < payInfo.value) {
            wx.showToast({
                title: "余额不足",
                icon: "none",
                duration: 2000,
            });
        }
        if (shooseType === "yfb" && payInfo.currentPrice) {
            this.coinPay();
        }
        else if (shooseType === "wx" && payInfo.currentPrice) {
            this.wxPay();
        }
        console.log("根据支付方式调用接口");
    },
    coinPay: function () {
        let that = this;
        const reqParams = this.preparePayInfo();
        console.log(`-----reqParams-----`, reqParams);
        Api.buyVipByCoin(reqParams).then((result) => {
            console.log(result);
            if (result && result.code === 200) {
                console.log(`coin pay付款结束complete: `, result);
                that.requestForUserInfo();
                wx.navigateTo({
                    url: `../paySuccess/paySuccess`,
                });
            }
        });
    },
    wxPay: function () {
        const reqParams = this.preparePayInfo();
        Api.buyVipByWechat(reqParams).then((result) => {
            console.log(result);
            if (result && result.code === 200) {
                let data = result.data;
                this.callWxForPay(data);
            }
        });
        console.log("wxPay");
    },
    callWxForPay: function (data) {
        const that = this;
        wx.requestPayment({
            timeStamp: data.timeStamp,
            nonceStr: data.nonceStr,
            package: "prepay_id=" + data.prepayId,
            signType: "MD5",
            paySign: data.paySign,
            success(res) {
                console.log(`付款成功: `, res);
            },
            fail(res) {
                console.log(`付款失败: `, res);
            },
            complete(res) {
                console.log(`付款结束complete: `, res);
                Api.checkOrderStatus(data.orderNum).then((result) => {
                    if (result && result.code === 200) {
                        that.requestForUserInfo();
                        wx.navigateTo({
                            url: `../paySuccess/paySuccess`,
                        });
                    }
                });
            },
        });
    },
    requestForUserInfo() {
        Api.getUserInfo(this.data.userInfo.openid).then((result) => {
            if (result) {
                const userInfo = result.data;
                this.setData({
                    userInfo,
                });
                wx.setStorageSync("userInfo", userInfo);
            }
        });
    },
    preparePayInfo: function () {
        const reqParams = {};
        const { userInfo, payInfo } = this.data;
        console.log(userInfo.vipType);
        console.log(payInfo);
        switch (userInfo.vipType) {
            case "bronze":
                if (payInfo.vipType === "bronze") {
                    reqParams.payType = "renew";
                }
                else {
                    reqParams.payType = "upgrade";
                }
                reqParams.period = payInfo.name;
                reqParams.vipType = payInfo.vipType;
                break;
            case "platinum":
                reqParams.payType = "renew";
                reqParams.period = payInfo.name;
                reqParams.vipType = "platinum";
                break;
            default:
                reqParams.payType = "join";
                reqParams.period = payInfo.name;
                reqParams.vipType = payInfo.vipType;
                break;
        }
        return reqParams;
    },
    onReady: function () { },
    onShow: function () { },
    onHide: function () { },
    onUnload: function () { },
    onPullDownRefresh: function () { },
    onReachBottom: function () { },
});
//# sourceMappingURL=data:application/json;base64,