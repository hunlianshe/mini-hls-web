"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Api = require("../service/api.service");
const showModal = (title, content) => {
    const model = {
        title: title ? title : "网络异常",
    };
    if (content) {
        model.content = content;
    }
    wx.showModal(model);
};
exports.showModal = showModal;
const showModelAction = (title, success) => {
    const model = {
        title: title ? title : "网络异常",
        success: function (_) {
            success();
        },
    };
    wx.showModal(model);
};
exports.showModelAction = showModelAction;
const cityReplace = (val) => {
    return val.replace(/市$/, "");
};
exports.cityReplace = cityReplace;
const validateEmpty = (value, desc) => {
    if (!value) {
        wx.showToast({
            title: desc,
            icon: "none",
        });
        return false;
    }
    else {
        return true;
    }
};
exports.validateEmpty = validateEmpty;
const validateImages = (images, desc) => {
    if (images.length <= 0) {
        wx.showToast({
            title: desc,
            icon: "none",
        });
        return false;
    }
    else {
        return true;
    }
};
exports.validateImages = validateImages;
const validatePhone = (phone, desc) => {
    const myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
    if (!myreg.test(phone)) {
        wx.showToast({
            title: desc,
            icon: "none",
        });
        return false;
    }
    else {
        return true;
    }
};
exports.validatePhone = validatePhone;
const phoneCall = (e) => {
    const phone = e.currentTarget.dataset.phone;
    wx.makePhoneCall({
        phoneNumber: phone,
    });
};
exports.phoneCall = phoneCall;
const getDate = (dateStr) => {
    const date = new Date(dateStr);
    const year = date.getFullYear();
    let month = date.getMonth() + 1;
    month = month <= 9 ? `0${month}` : month;
    let day = date.getDate();
    day = day <= 9 ? `0${day}` : day;
    return `${year}年${month}月${day}日`;
};
exports.getDate = getDate;
const getTime = (dateStr) => {
    const date = new Date(dateStr);
    let hours = date.getHours();
    hours = hours <= 9 ? `0${hours}` : hours;
    let minutes = date.getMinutes();
    minutes = minutes <= 9 ? `0${minutes}` : minutes;
    return `${minutes}:${minutes}`;
};
exports.getTime = getTime;
function formatTime(date) {
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const hour = date.getHours();
    const minute = date.getMinutes();
    const second = date.getSeconds();
    return ([year, month, day].map(formatNumber).join("/") +
        " " +
        [hour, minute, second].map(formatNumber).join(":"));
}
exports.formatTime = formatTime;
function formatHLSTime(dateStr) {
    const date = new Date(dateStr);
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    console.log(`-------`, year, month, day);
    return [year, month, day].map(formatNumber).join(".");
}
exports.formatHLSTime = formatHLSTime;
const formatNumber = (n) => {
    const str = n.toString();
    return str[1] ? str : "0" + str;
};
const getUserInfo = () => {
    let userInfo = {};
    wx.getStorage({
        key: "user",
        success: function (res) {
            const { openid } = res.data;
            userInfo = Api.getUserInfo(openid).then((result) => {
                console.log("result", result);
                if (result) {
                    return result.data || {};
                }
            });
        },
    });
    return userInfo;
};
const dealRightIntercept = (rightType) => {
    const userInfo = wx.getStorageSync("userInfo");
    console.log("userInfo", userInfo);
    const { vipType = "" } = userInfo;
    let needIntercept = false;
    let times = 0;
    let rightTypeData = wx.getStorageSync(rightType);
    let timesNow = rightTypeData.times || 0;
    let rightConfig = wx.getStorageSync("rightConfig");
    switch (vipType) {
        case "":
            times = rightConfig[0][rightType];
            console.log("读取拦截times：", times);
            needIntercept = timesNow >= times;
            break;
        case "bronze":
            times = rightConfig[1][rightType];
            console.log("读取拦截times：", times);
            needIntercept = timesNow >= times;
            break;
        case "platinum":
            times = rightConfig[2][rightType];
            console.log("读取拦截times：", times);
            needIntercept = timesNow >= times;
            break;
        default:
            needIntercept = false;
            break;
    }
    return needIntercept;
};
exports.dealRightIntercept = dealRightIntercept;
const setRightStorage = (rightType, value = 0) => {
    let times = 0;
    let rightData = wx.getStorageSync(rightType);
    let dateNow = new Date();
    if (rightData.updateTime &&
        rightData.updateTime.toDateString() == dateNow.toDateString()) {
        times = rightData.times + 1;
    }
    if (value) {
        times = value;
    }
    console.log("设置times：", times);
    wx.setStorage({
        key: rightType,
        data: {
            times,
            dateNow,
        },
    });
};
exports.setRightStorage = setRightStorage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhDQUE4QztBQUU5QyxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQVcsRUFBRSxPQUFhLEVBQUUsRUFBRTtJQUMvQyxNQUFNLEtBQUssR0FBUTtRQUNqQixLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU07S0FDOUIsQ0FBQztJQUNGLElBQUksT0FBTyxFQUFFO1FBQ1gsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7S0FDekI7SUFDRCxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQThMQSw4QkFBUztBQTVMWCxNQUFNLGVBQWUsR0FBRyxDQUFDLEtBQVUsRUFBRSxPQUFpQixFQUFFLEVBQUU7SUFDeEQsTUFBTSxLQUFLLEdBQVE7UUFDakIsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNO1FBQzdCLE9BQU8sRUFBRSxVQUFVLENBQU07WUFDdkIsT0FBTyxFQUFFLENBQUM7UUFDWixDQUFDO0tBQ0YsQ0FBQztJQUNGLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEIsQ0FBQyxDQUFDO0FBcUxBLDBDQUFlO0FBbkxqQixNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQVEsRUFBRSxFQUFFO0lBQy9CLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBa0xBLGtDQUFXO0FBL0tiLE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBVSxFQUFFLElBQVMsRUFBRSxFQUFFO0lBQzlDLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDVixFQUFFLENBQUMsU0FBUyxDQUFDO1lBQ1gsS0FBSyxFQUFFLElBQUk7WUFD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RUFBRSxFQUFFO0lBQ3ZELElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDN0MsSUFBSSxPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUV6QixJQUNFLFNBQVMsQ0FBQyxVQUFVO1FBQ3BCLFNBQVMsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLElBQUksT0FBTyxDQUFDLFlBQVksRUFBRSxFQUM3RDtRQUNBLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztLQUM3QjtJQUNELElBQUksS0FBSyxFQUFFO1FBQ1QsS0FBSyxHQUFHLEtBQUssQ0FBQztLQUNmO0lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQztRQUNaLEdBQUcsRUFBRSxTQUFTO1FBQ2QsSUFBSSxFQUFFO1lBQ0osS0FBSztZQUNMLE9BQU87U0FDUjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQWNBLDBDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQXBpIGZyb20gXCIuLi9zZXJ2aWNlL2FwaS5zZXJ2aWNlXCI7XG5cbmNvbnN0IHNob3dNb2RhbCA9ICh0aXRsZT86IGFueSwgY29udGVudD86IGFueSkgPT4ge1xuICBjb25zdCBtb2RlbDogYW55ID0ge1xuICAgIHRpdGxlOiB0aXRsZSA/IHRpdGxlIDogXCLnvZHnu5zlvILluLhcIixcbiAgfTtcbiAgaWYgKGNvbnRlbnQpIHtcbiAgICBtb2RlbC5jb250ZW50ID0gY29udGVudDtcbiAgfVxuICB3eC5zaG93TW9kYWwobW9kZWwpO1xufTtcblxuY29uc3Qgc2hvd01vZGVsQWN0aW9uID0gKHRpdGxlOiBhbnksIHN1Y2Nlc3M6IEZ1bmN0aW9uKSA9PiB7XG4gIGNvbnN0IG1vZGVsOiBhbnkgPSB7XG4gICAgdGl0bGU6IHRpdGxlID8gdGl0bGUgOiBcIue9kee7nOW8guW4uFwiLFxuICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChfOiBhbnkpIHtcbiAgICAgIHN1Y2Nlc3MoKTtcbiAgICB9LFxuICB9O1xuICB3eC5zaG93TW9kYWwobW9kZWwpO1xufTtcblxuY29uc3QgY2l0eVJlcGxhY2UgPSAodmFsOiBhbnkpID0+IHtcbiAgcmV0dXJuIHZhbC5yZXBsYWNlKC/luIIkLywgXCJcIik7XG59O1xuXG4vKiog5qCh6aqM5a2X5q615LiN6IO95Li656m6ICovXG5jb25zdCB2YWxpZGF0ZUVtcHR5ID0gKHZhbHVlOiBhbnksIGRlc2M6IGFueSkgPT4ge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgd3guc2hvd1RvYXN0KHtcbiAgICAgIHRpdGxlOiBkZXNjLFxuICAgICAgaWNvbjogXCJub25lXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG4vKiog5qCh6aqM5LiK5Lyg5Zu+54mHICovXG5jb25zdCB2YWxpZGF0ZUltYWdlcyA9IChpbWFnZXM6IGFueSwgZGVzYzogYW55KSA9PiB7XG4gIGlmIChpbWFnZXMubGVuZ3RoIDw9IDApIHtcbiAgICB3eC5zaG93VG9hc3Qoe1xuICAgICAgdGl0bGU6IGRlc2MsXG4gICAgICBpY29uOiBcIm5vbmVcIixcbiAgICB9KTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbi8qKiDmoKHpqozmiYvmnLrlj7fnoIHmoLzlvI8gKi9cbmNvbnN0IHZhbGlkYXRlUGhvbmUgPSAocGhvbmU6IGFueSwgZGVzYzogYW55KSA9PiB7XG4gIGNvbnN0IG15cmVnID0gL15bMV1bMyw0LDUsNyw4XVswLTldezl9JC87XG4gIGlmICghbXlyZWcudGVzdChwaG9uZSkpIHtcbiAgICB3eC5zaG93VG9hc3Qoe1xuICAgICAgdGl0bGU6IGRlc2MsXG4gICAgICBpY29uOiBcIm5vbmVcIixcbiAgICB9KTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbmNvbnN0IHBob25lQ2FsbCA9IChlOiBhbnkpID0+IHtcbiAgY29uc3QgcGhvbmUgPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5waG9uZTtcbiAgd3gubWFrZVBob25lQ2FsbCh7XG4gICAgcGhvbmVOdW1iZXI6IHBob25lLFxuICB9KTtcbn07XG5cbi8qKiAyMDIw5bm0MDPmnIgwOeaXpSAqL1xuY29uc3QgZ2V0RGF0ZSA9IChkYXRlU3RyOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGRhdGVTdHIpO1xuICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICBsZXQgbW9udGg6IG51bWJlciB8IHN0cmluZyA9IGRhdGUuZ2V0TW9udGgoKSArIDE7XG4gIG1vbnRoID0gbW9udGggPD0gOSA/IGAwJHttb250aH1gIDogbW9udGg7XG4gIGxldCBkYXk6IG51bWJlciB8IHN0cmluZyA9IGRhdGUuZ2V0RGF0ZSgpO1xuICBkYXkgPSBkYXkgPD0gOSA/IGAwJHtkYXl9YCA6IGRheTtcbiAgcmV0dXJuIGAke3llYXJ95bm0JHttb250aH3mnIgke2RheX3ml6VgO1xufTtcblxuLyoqIDA5OjIzICovXG5jb25zdCBnZXRUaW1lID0gKGRhdGVTdHI6IHN0cmluZykgPT4ge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoZGF0ZVN0cik7XG4gIGxldCBob3VyczogbnVtYmVyIHwgc3RyaW5nID0gZGF0ZS5nZXRIb3VycygpO1xuICBob3VycyA9IGhvdXJzIDw9IDkgPyBgMCR7aG91cnN9YCA6IGhvdXJzO1xuICBsZXQgbWludXRlczogbnVtYmVyIHwgc3RyaW5nID0gZGF0ZS5nZXRNaW51dGVzKCk7XG4gIG1pbnV0ZXMgPSBtaW51dGVzIDw9IDkgPyBgMCR7bWludXRlc31gIDogbWludXRlcztcbiAgcmV0dXJuIGAke21pbnV0ZXN9OiR7bWludXRlc31gO1xufTtcblxuZnVuY3Rpb24gZm9ybWF0VGltZShkYXRlOiBEYXRlKTogc3RyaW5nIHtcbiAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgY29uc3QgbW9udGggPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICBjb25zdCBkYXkgPSBkYXRlLmdldERhdGUoKTtcbiAgY29uc3QgaG91ciA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgY29uc3QgbWludXRlID0gZGF0ZS5nZXRNaW51dGVzKCk7XG4gIGNvbnN0IHNlY29uZCA9IGRhdGUuZ2V0U2Vjb25kcygpO1xuXG4gIHJldHVybiAoXG4gICAgW3llYXIsIG1vbnRoLCBkYXldLm1hcChmb3JtYXROdW1iZXIpLmpvaW4oXCIvXCIpICtcbiAgICBcIiBcIiArXG4gICAgW2hvdXIsIG1pbnV0ZSwgc2Vjb25kXS5tYXAoZm9ybWF0TnVtYmVyKS5qb2luKFwiOlwiKVxuICApO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRITFNUaW1lKGRhdGVTdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShkYXRlU3RyKTtcbiAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgY29uc3QgbW9udGggPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICBjb25zdCBkYXkgPSBkYXRlLmdldERhdGUoKTtcbiAgY29uc29sZS5sb2coYC0tLS0tLS1gLCB5ZWFyLCBtb250aCwgZGF5KTtcbiAgcmV0dXJuIFt5ZWFyLCBtb250aCwgZGF5XS5tYXAoZm9ybWF0TnVtYmVyKS5qb2luKFwiLlwiKTtcbn1cblxuY29uc3QgZm9ybWF0TnVtYmVyID0gKG46IG51bWJlcikgPT4ge1xuICBjb25zdCBzdHIgPSBuLnRvU3RyaW5nKCk7XG4gIHJldHVybiBzdHJbMV0gPyBzdHIgOiBcIjBcIiArIHN0cjtcbn07XG5cbi8qKiDojrflj5bnlKjmiLfkv6Hmga8gKi9cbmNvbnN0IGdldFVzZXJJbmZvID0gKCkgPT4ge1xuICBsZXQgdXNlckluZm86IGFueSA9IHt9O1xuICB3eC5nZXRTdG9yYWdlKHtcbiAgICBrZXk6IFwidXNlclwiLCAvLyDnlKjmiLflpLTlg4/kv6Hmga9cbiAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzKSB7XG4gICAgICBjb25zdCB7IG9wZW5pZCB9ID0gcmVzLmRhdGE7XG4gICAgICB1c2VySW5mbyA9IEFwaS5nZXRVc2VySW5mbyhvcGVuaWQpLnRoZW4oKHJlc3VsdDogYW55KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVzdWx0XCIscmVzdWx0KVxuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhIHx8IHt9O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICB9KTtcbiAgcmV0dXJuIHVzZXJJbmZvO1xufTtcblxuLyoqIOWkhOeQhuadg+ebiuaLpuaIqiAqL1xuY29uc3QgZGVhbFJpZ2h0SW50ZXJjZXB0ID0gKHJpZ2h0VHlwZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHVzZXJJbmZvID0gd3guZ2V0U3RvcmFnZVN5bmMoXCJ1c2VySW5mb1wiKTtcbiAgY29uc29sZS5sb2coXCJ1c2VySW5mb1wiLCB1c2VySW5mbyk7XG4gIC8vIGxldCB1c2VySW5mbyA9IGdldFVzZXJJbmZvKCk7XG4gIGNvbnN0IHsgdmlwVHlwZSA9IFwiXCIgfSA9IHVzZXJJbmZvO1xuICBsZXQgbmVlZEludGVyY2VwdCA9IGZhbHNlOyAvLyDmmK/lkKbpnIDopoHmi6bmiKpcbiAgbGV0IHRpbWVzID0gMDtcbiAgbGV0IHJpZ2h0VHlwZURhdGEgPSB3eC5nZXRTdG9yYWdlU3luYyhyaWdodFR5cGUpOyAvLyDku47nvJPlrZjkuK3ojrflj5bmnYPnm4rkvb/nlKjmg4XlhrVcbiAgbGV0IHRpbWVzTm93ID0gcmlnaHRUeXBlRGF0YS50aW1lcyB8fCAwO1xuICBsZXQgcmlnaHRDb25maWc6IGFueSA9IHd4LmdldFN0b3JhZ2VTeW5jKFwicmlnaHRDb25maWdcIik7IC8vIOS7jue8k+WtmOS4reivu+WPlummlumhteS4rXNldOeahOadg+ebiumFjee9rlxuICBzd2l0Y2ggKHZpcFR5cGUpIHtcbiAgICBjYXNlIFwiXCI6IC8vIOaZrumAmlxuICAgICAgdGltZXMgPSByaWdodENvbmZpZ1swXVtyaWdodFR5cGVdO1xuICAgICAgY29uc29sZS5sb2coXCLor7vlj5bmi6bmiKp0aW1lc++8mlwiLCB0aW1lcyk7XG4gICAgICBuZWVkSW50ZXJjZXB0ID0gdGltZXNOb3cgPj0gdGltZXM7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYnJvbnplXCI6IC8vIOm7hOmTnFxuICAgICAgdGltZXMgPSByaWdodENvbmZpZ1sxXVtyaWdodFR5cGVdO1xuICAgICAgY29uc29sZS5sb2coXCLor7vlj5bmi6bmiKp0aW1lc++8mlwiLCB0aW1lcyk7XG4gICAgICBuZWVkSW50ZXJjZXB0ID0gdGltZXNOb3cgPj0gdGltZXM7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicGxhdGludW1cIjogLy8g55m96YeRXG4gICAgICB0aW1lcyA9IHJpZ2h0Q29uZmlnWzJdW3JpZ2h0VHlwZV07XG4gICAgICBjb25zb2xlLmxvZyhcIuivu+WPluaLpuaIqnRpbWVz77yaXCIsIHRpbWVzKTtcbiAgICAgIG5lZWRJbnRlcmNlcHQgPSB0aW1lc05vdyA+PSB0aW1lcztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBuZWVkSW50ZXJjZXB0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gbmVlZEludGVyY2VwdDtcbn07XG5cbmNvbnN0IHNldFJpZ2h0U3RvcmFnZSA9IChyaWdodFR5cGU6IHN0cmluZywgdmFsdWUgPSAwKSA9PiB7XG4gIGxldCB0aW1lcyA9IDA7XG4gIGxldCByaWdodERhdGEgPSB3eC5nZXRTdG9yYWdlU3luYyhyaWdodFR5cGUpO1xuICBsZXQgZGF0ZU5vdyA9IG5ldyBEYXRlKCk7XG4gIC8vIOWIpOaWreaYr+WQpuaYr+WQjOS4gOWkqVxuICBpZiAoXG4gICAgcmlnaHREYXRhLnVwZGF0ZVRpbWUgJiZcbiAgICByaWdodERhdGEudXBkYXRlVGltZS50b0RhdGVTdHJpbmcoKSA9PSBkYXRlTm93LnRvRGF0ZVN0cmluZygpXG4gICkge1xuICAgIHRpbWVzID0gcmlnaHREYXRhLnRpbWVzICsgMTtcbiAgfVxuICBpZiAodmFsdWUpIHtcbiAgICB0aW1lcyA9IHZhbHVlO1xuICB9XG4gIGNvbnNvbGUubG9nKFwi6K6+572udGltZXPvvJpcIiwgdGltZXMpO1xuICB3eC5zZXRTdG9yYWdlKHtcbiAgICBrZXk6IHJpZ2h0VHlwZSxcbiAgICBkYXRhOiB7XG4gICAgICB0aW1lcyxcbiAgICAgIGRhdGVOb3csXG4gICAgfSxcbiAgfSk7XG59O1xuXG5leHBvcnQge1xuICBzaG93TW9kYWwsXG4gIHNob3dNb2RlbEFjdGlvbixcbiAgY2l0eVJlcGxhY2UsXG4gIHZhbGlkYXRlRW1wdHksXG4gIHZhbGlkYXRlSW1hZ2VzLFxuICB2YWxpZGF0ZVBob25lLFxuICBwaG9uZUNhbGwsXG4gIGdldERhdGUsXG4gIGdldFRpbWUsXG4gIGZvcm1hdFRpbWUsXG4gIGRlYWxSaWdodEludGVyY2VwdCxcbiAgc2V0UmlnaHRTdG9yYWdlLFxuICBmb3JtYXRITFNUaW1lLFxufTtcbiJdfQ==