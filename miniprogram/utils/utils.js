"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Api = require("../service/api.service");
const showModal = (title, content) => {
    const model = {
        title: title ? title : "网络异常",
    };
    if (content) {
        model.content = content;
    }
    wx.showModal(model);
};
exports.showModal = showModal;
const showModelAction = (title, success) => {
    const model = {
        title: title ? title : "网络异常",
        success: function (_) {
            success();
        },
    };
    wx.showModal(model);
};
exports.showModelAction = showModelAction;
const cityReplace = (val) => {
    return val.replace(/市$/, "");
};
exports.cityReplace = cityReplace;
const validateEmpty = (value, desc) => {
    if (!value) {
        wx.showToast({
            title: desc,
            icon: "none",
        });
        return false;
    }
    else {
        return true;
    }
};
exports.validateEmpty = validateEmpty;
const validateImages = (images, desc) => {
    if (images.length <= 0) {
        wx.showToast({
            title: desc,
            icon: "none",
        });
        return false;
    }
    else {
        return true;
    }
};
exports.validateImages = validateImages;
const validatePhone = (phone, desc) => {
    const myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
    if (!myreg.test(phone)) {
        wx.showToast({
            title: desc,
            icon: "none",
        });
        return false;
    }
    else {
        return true;
    }
};
exports.validatePhone = validatePhone;
const phoneCall = (e) => {
    const phone = e.currentTarget.dataset.phone;
    wx.makePhoneCall({
        phoneNumber: phone,
    });
};
exports.phoneCall = phoneCall;
const getDate = (dateStr) => {
    if (!dateStr) {
        return '';
    }
    const date = new Date(dateStr);
    const year = date.getFullYear();
    let month = date.getMonth() + 1;
    month = month <= 9 ? `0${month}` : month;
    let day = date.getDate();
    day = day <= 9 ? `0${day}` : day;
    return `${year}年${month}月${day}日`;
};
exports.getDate = getDate;
const getTime = (dateStr) => {
    const date = new Date(dateStr);
    let hours = date.getHours();
    hours = hours <= 9 ? `0${hours}` : hours;
    let minutes = date.getMinutes();
    minutes = minutes <= 9 ? `0${minutes}` : minutes;
    return `${hours}:${minutes}`;
};
exports.getTime = getTime;
function formatTime(date) {
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const hour = date.getHours();
    const minute = date.getMinutes();
    const second = date.getSeconds();
    return ([year, month, day].map(formatNumber).join("/") +
        " " +
        [hour, minute, second].map(formatNumber).join(":"));
}
exports.formatTime = formatTime;
function formatHLSTime(dateStr) {
    if (dateStr === '') {
        return '';
    }
    const date = new Date(dateStr);
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    console.log(`-------`, year, month, day);
    return [year, month, day].map(formatNumber).join(".");
}
exports.formatHLSTime = formatHLSTime;
const formatNumber = (n) => {
    const str = n.toString();
    return str[1] ? str : "0" + str;
};
const getUserInfo = () => {
    let userInfo = {};
    wx.getStorage({
        key: "user",
        success: function (res) {
            const { openid } = res.data;
            userInfo = Api.getUserInfo(openid).then((result) => {
                console.log("result", result);
                if (result) {
                    return result.data || {};
                }
            });
        },
    });
    return userInfo;
};
exports.getUserInfo = getUserInfo;
const dealRightIntercept = (rightType) => {
    const userInfo = wx.getStorageSync("userInfo");
    console.log("userInfo", userInfo);
    const { vipType = "" } = userInfo;
    let needIntercept = false;
    let times = 0;
    let rightTypeData = wx.getStorageSync(rightType);
    let timesNow = rightTypeData.times || 0;
    let rightConfig = wx.getStorageSync("rightConfig");
    switch (vipType) {
        case "":
            times = rightConfig[0][rightType];
            console.log("读取拦截times：", times);
            needIntercept = timesNow >= times;
            break;
        case "bronze":
            times = rightConfig[1][rightType];
            console.log("读取拦截times：", times);
            needIntercept = timesNow >= times;
            break;
        case "platinum":
            times = rightConfig[2][rightType];
            console.log("读取拦截times：", times);
            needIntercept = timesNow >= times;
            break;
        default:
            needIntercept = false;
            break;
    }
    return needIntercept;
};
exports.dealRightIntercept = dealRightIntercept;
const setRightStorage = (rightType, value = 0) => {
    let times = 0;
    let rightData = wx.getStorageSync(rightType);
    let dateNow = new Date();
    if (rightData.updateTime &&
        rightData.updateTime.toDateString() == dateNow.toDateString()) {
        times = rightData.times + 1;
    }
    if (value) {
        times = value;
    }
    console.log("设置times：", times);
    wx.setStorage({
        key: rightType,
        data: {
            times,
            dateNow,
        },
    });
};
exports.setRightStorage = setRightStorage;
//# sourceMappingURL=data:application/json;base64,