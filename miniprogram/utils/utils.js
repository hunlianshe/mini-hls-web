"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const showModal = (title, content) => {
    const model = {
        title: title ? title : '网络异常',
    };
    if (content) {
        model.content = content;
    }
    wx.showModal(model);
};
exports.showModal = showModal;
const showModelAction = (title, success) => {
    const model = {
        title: title ? title : '网络异常',
        success: function (_) {
            success();
        }
    };
    wx.showModal(model);
};
exports.showModelAction = showModelAction;
const cityReplace = (val) => {
    return val.replace(/市$/, '');
};
exports.cityReplace = cityReplace;
const validateEmpty = (value, desc) => {
    if (!value) {
        wx.showToast({
            title: desc,
            icon: 'none',
        });
        return false;
    }
    else {
        return true;
    }
};
exports.validateEmpty = validateEmpty;
const validateImages = (images, desc) => {
    if (images.length <= 0) {
        wx.showToast({
            title: desc,
            icon: 'none',
        });
        return false;
    }
    else {
        return true;
    }
};
exports.validateImages = validateImages;
const validatePhone = (phone, desc) => {
    const myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
    if (!myreg.test(phone)) {
        wx.showToast({
            title: desc,
            icon: 'none',
        });
        return false;
    }
    else {
        return true;
    }
};
exports.validatePhone = validatePhone;
const phoneCall = (e) => {
    const phone = e.currentTarget.dataset.phone;
    wx.makePhoneCall({
        phoneNumber: phone,
    });
};
exports.phoneCall = phoneCall;
const getDate = (dateStr) => {
    const date = new Date(dateStr);
    const year = date.getFullYear();
    let month = date.getMonth() + 1;
    month = month <= 9 ? `0${month}` : month;
    let day = date.getDate();
    day = day <= 9 ? `0${day}` : day;
    return `${year}年${month}月${day}日`;
};
exports.getDate = getDate;
const getTime = (dateStr) => {
    const date = new Date(dateStr);
    let hours = date.getHours();
    hours = hours <= 9 ? `0${hours}` : hours;
    let minutes = date.getMinutes();
    minutes = minutes <= 9 ? `0${minutes}` : minutes;
    return `${minutes}:${minutes}`;
};
exports.getTime = getTime;
function formatTime(date) {
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const hour = date.getHours();
    const minute = date.getMinutes();
    const second = date.getSeconds();
    return [year, month, day].map(formatNumber).join('/') + ' ' + [hour, minute, second].map(formatNumber).join(':');
}
exports.formatTime = formatTime;
const formatNumber = (n) => {
    const str = n.toString();
    return str[1] ? str : '0' + str;
};
const dealRightIntercept = (vipType, rightType) => {
    let needIntercept = false;
    let times = 0;
    let rightTypeData = wx.getStorageSync(rightType);
    let timesNow = rightTypeData.times || 0;
    let rightConfig = wx.getStorageSync('rightConfig');
    switch (vipType) {
        case '':
            times = rightConfig[0][rightType];
            console.log('读取拦截times：', times);
            needIntercept = timesNow >= times;
            break;
        case 'bronze':
            times = rightConfig[1][rightType];
            console.log('读取拦截times：', times);
            needIntercept = timesNow >= times;
            break;
        case 'platinum':
            times = rightConfig[2][rightType];
            console.log('读取拦截times：', times);
            needIntercept = timesNow >= times;
            break;
        default:
            needIntercept = false;
            break;
    }
    return needIntercept;
};
exports.dealRightIntercept = dealRightIntercept;
const setRightStorage = (rightType) => {
    let times = 0;
    let rightData = wx.getStorageSync(rightType);
    let dateNow = new Date();
    if (rightData.updateTime && rightData.updateTime.toDateString() == dateNow.toDateString()) {
        times = rightData.times + 1;
    }
    console.log('设置times：', times);
    wx.setStorage({
        key: rightType,
        data: {
            times,
            dateNow,
        }
    });
};
exports.setRightStorage = setRightStorage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBVyxFQUFFLE9BQWEsRUFBRSxFQUFFO0lBQy9DLE1BQU0sS0FBSyxHQUFRO1FBQ2pCLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTTtLQUM5QixDQUFBO0lBQ0QsSUFBSSxPQUFPLEVBQUU7UUFDWCxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtLQUN4QjtJQUNELEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDckIsQ0FBQyxDQUFBO0FBcUpDLDhCQUFTO0FBbkpYLE1BQU0sZUFBZSxHQUFHLENBQUMsS0FBVSxFQUFFLE9BQWlCLEVBQUUsRUFBRTtJQUN4RCxNQUFNLEtBQUssR0FBUTtRQUNqQixLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU07UUFDN0IsT0FBTyxFQUFFLFVBQVMsQ0FBTTtZQUN0QixPQUFPLEVBQUUsQ0FBQTtRQUNYLENBQUM7S0FDRixDQUFBO0lBQ0QsRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUE0SUMsMENBQWU7QUExSWpCLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQUU7SUFDL0IsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMvQixDQUFDLENBQUE7QUF5SUMsa0NBQVc7QUF0SWIsTUFBTSxhQUFhLEdBQUcsQ0FBQyxLQUFVLEVBQUUsSUFBUSxFQUFFLEVBQUU7SUFDN0MsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNWLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDWCxLQUFLLEVBQUUsSUFBSTtZQUNYLElBQUksRUFBRSxN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QUFVLENBQUMsWUFBWSxFQUFFLElBQUksT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFO1FBQ3pGLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztLQUM3QjtJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUM7UUFDWixHQUFHLEVBQUUsU0FBUztRQUNkLElBQUksRUFBRTtZQUNKLEtBQUs7WUFDTCxPQUFPO1NBQ1I7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUE7QUFjQywwQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3Qgc2hvd01vZGFsID0gKHRpdGxlPzogYW55LCBjb250ZW50PzogYW55KSA9PiB7XG4gIGNvbnN0IG1vZGVsOiBhbnkgPSB7XG4gICAgdGl0bGU6IHRpdGxlID8gdGl0bGUgOiAn572R57uc5byC5bi4JyxcbiAgfVxuICBpZiAoY29udGVudCkge1xuICAgIG1vZGVsLmNvbnRlbnQgPSBjb250ZW50XG4gIH1cbiAgd3guc2hvd01vZGFsKG1vZGVsKVxufVxuXG5jb25zdCBzaG93TW9kZWxBY3Rpb24gPSAodGl0bGU6IGFueSwgc3VjY2VzczogRnVuY3Rpb24pID0+IHtcbiAgY29uc3QgbW9kZWw6IGFueSA9IHtcbiAgICB0aXRsZTogdGl0bGUgPyB0aXRsZSA6ICfnvZHnu5zlvILluLgnLFxuICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKF86IGFueSkge1xuICAgICAgc3VjY2VzcygpXG4gICAgfVxuICB9XG4gIHd4LnNob3dNb2RhbChtb2RlbClcbn1cblxuY29uc3QgY2l0eVJlcGxhY2UgPSAodmFsOiBhbnkpID0+IHtcbiAgcmV0dXJuIHZhbC5yZXBsYWNlKC/luIIkLywgJycpO1xufVxuXG4vKiog5qCh6aqM5a2X5q615LiN6IO95Li656m6ICovXG5jb25zdCB2YWxpZGF0ZUVtcHR5ID0gKHZhbHVlOiBhbnksIGRlc2M6YW55KSA9PiB7XG4gIGlmICghdmFsdWUpIHtcbiAgICB3eC5zaG93VG9hc3Qoe1xuICAgICAgdGl0bGU6IGRlc2MsXG4gICAgICBpY29uOiAnbm9uZScsXG4gICAgfSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbi8qKiDmoKHpqozkuIrkvKDlm77niYcgKi9cbmNvbnN0IHZhbGlkYXRlSW1hZ2VzID0gKGltYWdlczphbnksIGRlc2M6YW55KSA9PiB7XG4gIGlmIChpbWFnZXMubGVuZ3RoIDw9IDApIHtcbiAgICB3eC5zaG93VG9hc3Qoe1xuICAgICAgdGl0bGU6IGRlc2MsXG4gICAgICBpY29uOiAnbm9uZScsXG4gICAgfSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbi8qKiDmoKHpqozmiYvmnLrlj7fnoIHmoLzlvI8gKi9cbmNvbnN0IHZhbGlkYXRlUGhvbmUgPSAocGhvbmU6YW55LCBkZXNjOmFueSkgPT4ge1xuICBjb25zdCBteXJlZyA9IC9eWzFdWzMsNCw1LDcsOF1bMC05XXs5fSQvO1xuICBpZiAoIW15cmVnLnRlc3QocGhvbmUpKSB7XG4gICAgd3guc2hvd1RvYXN0KHtcbiAgICAgIHRpdGxlOiBkZXNjLFxuICAgICAgaWNvbjogJ25vbmUnLFxuICAgIH0pO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5jb25zdCBwaG9uZUNhbGwgPSAoZTogYW55KSA9PiB7XG4gIGNvbnN0IHBob25lID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQucGhvbmVcbiAgd3gubWFrZVBob25lQ2FsbCh7XG4gICAgcGhvbmVOdW1iZXI6IHBob25lLFxuICB9KVxufVxuXG4vKiogMjAyMOW5tDAz5pyIMDnml6UgKi9cbmNvbnN0IGdldERhdGUgPSAoZGF0ZVN0cjogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShkYXRlU3RyKTtcbiAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgbGV0IG1vbnRoOiBudW1iZXIgfCBzdHJpbmcgPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICBtb250aCA9IG1vbnRoIDw9IDkgPyBgMCR7bW9udGh9YCA6IG1vbnRoO1xuICBsZXQgZGF5OiBudW1iZXIgfCBzdHJpbmcgPSBkYXRlLmdldERhdGUoKTtcbiAgZGF5ID0gZGF5IDw9IDkgPyBgMCR7ZGF5fWAgOiBkYXk7XG4gIHJldHVybiBgJHt5ZWFyfeW5tCR7bW9udGh95pyIJHtkYXl95pelYDtcbn07XG5cbi8qKiAwOToyMyAqL1xuY29uc3QgZ2V0VGltZSA9IChkYXRlU3RyOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGRhdGVTdHIpO1xuICBsZXQgaG91cnM6IG51bWJlciB8IHN0cmluZyA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgaG91cnMgPSBob3VycyA8PSA5ID8gYDAke2hvdXJzfWAgOiBob3VycztcbiAgbGV0IG1pbnV0ZXM6IG51bWJlciB8IHN0cmluZyA9IGRhdGUuZ2V0TWludXRlcygpO1xuICBtaW51dGVzID0gbWludXRlcyA8PSA5ID8gYDAke21pbnV0ZXN9YCA6IG1pbnV0ZXM7XG4gIHJldHVybiBgJHttaW51dGVzfToke21pbnV0ZXN9YDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZShkYXRlOiBEYXRlKTogc3RyaW5nIHtcbiAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKVxuICBjb25zdCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDFcbiAgY29uc3QgZGF5ID0gZGF0ZS5nZXREYXRlKClcbiAgY29uc3QgaG91ciA9IGRhdGUuZ2V0SG91cnMoKVxuICBjb25zdCBtaW51dGUgPSBkYXRlLmdldE1pbnV0ZXMoKVxuICBjb25zdCBzZWNvbmQgPSBkYXRlLmdldFNlY29uZHMoKVxuXG4gIHJldHVybiBbeWVhciwgbW9udGgsIGRheV0ubWFwKGZvcm1hdE51bWJlcikuam9pbignLycpICsgJyAnICsgW2hvdXIsIG1pbnV0ZSwgc2Vjb25kXS5tYXAoZm9ybWF0TnVtYmVyKS5qb2luKCc6Jylcbn1cblxuY29uc3QgZm9ybWF0TnVtYmVyID0gKG46IG51bWJlcikgPT4ge1xuICBjb25zdCBzdHIgPSBuLnRvU3RyaW5nKClcbiAgcmV0dXJuIHN0clsxXSA/IHN0ciA6ICcwJyArIHN0clxufVxuXG4vKiog5aSE55CG5p2D55uK5oum5oiqICovXG5jb25zdCBkZWFsUmlnaHRJbnRlcmNlcHQgPSAodmlwVHlwZTogc3RyaW5nLCByaWdodFR5cGU6IHN0cmluZyApID0+IHtcbiAgbGV0IG5lZWRJbnRlcmNlcHQgPSBmYWxzZTsgLy8g5piv5ZCm6ZyA6KaB5oum5oiqXG4gIGxldCB0aW1lcyA9IDA7XG4gIGxldCByaWdodFR5cGVEYXRhID0gd3guZ2V0U3RvcmFnZVN5bmMocmlnaHRUeXBlKTsgLy8g5LuO57yT5a2Y5Lit6I635Y+W5p2D55uK5L2/55So5oOF5Ya1XG4gIGxldCB0aW1lc05vdyA9IHJpZ2h0VHlwZURhdGEudGltZXMgfHwgMDtcbiAgbGV0IHJpZ2h0Q29uZmlnOiBhbnkgPSB3eC5nZXRTdG9yYWdlU3luYygncmlnaHRDb25maWcnKTsgLy8g5LuO57yT5a2Y5Lit6K+75Y+W6aaW6aG15Litc2V055qE5p2D55uK6YWN572uXG4gIHN3aXRjaCAodmlwVHlwZSkge1xuICAgIGNhc2UgJyc6IC8vIOaZrumAmlxuICAgICAgdGltZXMgPSByaWdodENvbmZpZ1swXVtyaWdodFR5cGVdO1xuICAgICAgY29uc29sZS5sb2coJ+ivu+WPluaLpuaIqnRpbWVz77yaJywgdGltZXMpO1xuICAgICAgbmVlZEludGVyY2VwdCA9IHRpbWVzTm93ID49IHRpbWVzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYnJvbnplJzogLy8g6buE6ZOcXG4gICAgICB0aW1lcyA9IHJpZ2h0Q29uZmlnWzFdW3JpZ2h0VHlwZV07XG4gICAgICBjb25zb2xlLmxvZygn6K+75Y+W5oum5oiqdGltZXPvvJonLCB0aW1lcyk7XG4gICAgICBuZWVkSW50ZXJjZXB0ID0gdGltZXNOb3cgPj0gdGltZXM7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdwbGF0aW51bSc6IC8vIOeZvemHkVxuICAgICAgdGltZXMgPSByaWdodENvbmZpZ1syXVtyaWdodFR5cGVdO1xuICAgICAgY29uc29sZS5sb2coJ+ivu+WPluaLpuaIqnRpbWVz77yaJywgdGltZXMpO1xuICAgICAgbmVlZEludGVyY2VwdCA9IHRpbWVzTm93ID49IHRpbWVzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIG5lZWRJbnRlcmNlcHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBuZWVkSW50ZXJjZXB0O1xufVxuXG5jb25zdCBzZXRSaWdodFN0b3JhZ2UgPSAocmlnaHRUeXBlOiBzdHJpbmcpID0+IHtcbiAgbGV0IHRpbWVzID0gMDtcbiAgbGV0IHJpZ2h0RGF0YSA9IHd4LmdldFN0b3JhZ2VTeW5jKHJpZ2h0VHlwZSk7XG4gIGxldCBkYXRlTm93ID0gbmV3IERhdGUoKTtcbiAgLy8g5Yik5pat5piv5ZCm5piv5ZCM5LiA5aSpXG4gIGlmIChyaWdodERhdGEudXBkYXRlVGltZSAmJiByaWdodERhdGEudXBkYXRlVGltZS50b0RhdGVTdHJpbmcoKSA9PSBkYXRlTm93LnRvRGF0ZVN0cmluZygpKSB7XG4gICAgdGltZXMgPSByaWdodERhdGEudGltZXMgKyAxO1xuICB9XG4gIGNvbnNvbGUubG9nKCforr7nva50aW1lc++8micsIHRpbWVzKTtcbiAgd3guc2V0U3RvcmFnZSh7XG4gICAga2V5OiByaWdodFR5cGUsXG4gICAgZGF0YToge1xuICAgICAgdGltZXMsXG4gICAgICBkYXRlTm93LFxuICAgIH0gXG4gIH0pO1xufVxuXG5leHBvcnQge1xuICBzaG93TW9kYWwsXG4gIHNob3dNb2RlbEFjdGlvbixcbiAgY2l0eVJlcGxhY2UsXG4gIHZhbGlkYXRlRW1wdHksXG4gIHZhbGlkYXRlSW1hZ2VzLFxuICB2YWxpZGF0ZVBob25lLFxuICBwaG9uZUNhbGwsXG4gIGdldERhdGUsXG4gIGdldFRpbWUsXG4gIGZvcm1hdFRpbWUsXG4gIGRlYWxSaWdodEludGVyY2VwdCxcbiAgc2V0UmlnaHRTdG9yYWdlLFxufSJdfQ==