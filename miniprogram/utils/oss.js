"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../config");
const Base64_1 = require("./Base64");
const utils = require("../utils/utils");
const crypto_1 = require("./crypto");
console.log(config_1.default);
const uploadFile = function (params) {
    if (!params.filePath || params.filePath.length < 9) {
        wx.showModal({
            title: '图片错误',
            content: '请重试',
            showCancel: false,
        });
        return;
    }
    console.log("params.filePath", params.filePath);
    const aliyunFileKey = params.dir;
    const aliyunServerURL = config_1.default.uploadImageUrl;
    const accessid = config_1.default.OSSAccessKeyId;
    const policyBase64 = getPolicyBase64();
    const signature = getSignature(policyBase64);
    wx.uploadFile({
        url: aliyunServerURL,
        filePath: params.filePath,
        name: 'file',
        formData: {
            'key': aliyunFileKey,
            'policy': policyBase64,
            'OSSAccessKeyId': accessid,
            'signature': signature,
            'success_action_status': '200',
        },
        success: function (res) {
            console.log('uploadFile params', params);
            console.log('uploadFile sucess', res);
            if (res.statusCode != 200) {
                if (params.fail) {
                    params.fail(res);
                }
                return;
            }
            if (params.success) {
                console.log('are you coming...');
                params.success(aliyunFileKey);
            }
        },
        fail: function (err) {
            console.log('uploadFile file', err);
            utils.showModal();
            err.wxaddinfo = aliyunServerURL;
            if (params.fail) {
                params.fail(err);
            }
            ;
        },
    });
};
const getPolicyBase64 = function () {
    let date = new Date();
    date.setHours(date.getHours() + config_1.default.timeout);
    let srcT = date.toISOString();
    const policyText = {
        "expiration": srcT,
        "conditions": [
            ["content-length-range", 0, 5 * 1024 * 1024]
        ]
    };
    const policyBase64 = Base64_1.default.encode(JSON.stringify(policyText));
    return policyBase64;
};
const getSignature = function (policyBase64) {
    const accesskey = config_1.default.AccessKeySecret;
    console.log('Crypto.SHA1', crypto_1.default.SHA1);
    const bytes = crypto_1.default.HMAC(crypto_1.default.SHA1, policyBase64, accesskey, {
        asBytes: true
    });
    const signature = crypto_1.default.util.bytesToBase64(bytes);
    return signature;
};
exports.default = uploadFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3NzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsib3NzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTRCO0FBRTVCLHFDQUErQjtBQUMvQix3Q0FBd0M7QUFJeEMscUNBQThCO0FBRTlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQUcsQ0FBQyxDQUFDO0FBQ2pCLE1BQU0sVUFBVSxHQUFHLFVBQVUsTUFBVTtJQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDbEQsRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUNYLEtBQUssRUFBRSxNQUFNO1lBQ2IsT0FBTyxFQUFFLEtBQUs7WUFDZCxVQUFVLEVBQUUsS0FBSztTQUNsQixDQUFDLENBQUE7UUFDRixPQUFPO0tBQ1I7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUMvQyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2pDLE1BQU0sZUFBZSxHQUFHLGdCQUFHLENBQUMsY0FBYyxDQUFDO0lBQzNDLE1BQU0sUUFBUSxHQUFHLGdCQUFHLENBQUMsY0FBYyxDQUFDO0lBQ3BDLE1BQU0sWUFBWSxHQUFHLGVBQWUsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUU3QyxFQUFFLENBQUMsVUFBVSxDQUFDO1FBQ1osR0FBRyxFQUFFLGVBQWU7UUFDcEIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRO1FBQ3pCLElBQUksRUFBRSxNQUFNO1FBQ1osUUFBUSxFQUFFO1lBRVIsS0FBSyxFQUFFLGFBQWE7WUFDcEIsUUFBUSxFQUFFLFlBQVk7WUFDdEIsZ0JBQWdCLEVBQUUsUUFBUTtZQUMxQixXQUFXLEVBQUUsU0FBUztZQUN0Qix1QkFBdUIsRUFBRSxLQUFLO1NBQy9CO1FBQ0QsT0FBTyxFQUFFLFVBQVUsR0FBRztZQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDdEMsSUFBSSxHQUFHLENBQUMsVUFBVSxJQUFJLEdBQUcsRUFBRTtnQkFDekIsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO29CQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7aUJBQ2pCO2dCQUNELE9BQU87YUFDUjtZQUNELElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtnQkFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO2dCQUNoQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQy9CO1FBQ0gsQ0FBQztRQUNELElBQUksRUFBRSxVQUFVLEdBQVE7WUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNwQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDbEIsR0FBRyxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUM7WUFDaEMsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO2dCQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7YUFDakI7WUFBQSxDQUFDO1FBQ0osQ0FBQztLQUNGLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQTtBQUVELE1BQU0sZUFBZSxHQUFHO0lBQ3RCLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsZ0JBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDOUIsTUFBTSxVQUFVLEdBQUc7UUFDakIsWUFBWSxFQUFFLElBQUk7UUFDbEIsWUFBWSxFQUFFO1lBQ1osQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7U0FDN0M7S0FDRixDQUFDO0lBRUYsTUFBTSxZQUFZLEdBQUcsZ0JBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQy9ELE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUMsQ0FBQTtBQUVELE1BQU0sWUFBWSxHQUFHLFVBQVUsWUFBZ0I7SUFDN0MsTUFBTSxTQUFTLEdBQUcsZ0JBQUcsQ0FBQyxlQUFlLENBQUM7SUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN2QyxNQUFNLEtBQUssR0FBRyxnQkFBTSxDQUFDLElBQUksQ0FBQyxnQkFBTSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFO1FBQzlELE9BQU8sRUFBRSxJQUFJO0tBQ2QsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxTQUFTLEdBQUcsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRW5ELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQTtBQUVELGtCQUFlLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlbnYgZnJvbSAnLi4vY29uZmlnJztcclxuXHJcbmltcG9ydCBCYXNlNjQgZnJvbSAgJy4vQmFzZTY0JztcclxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuLy8gcmVxdWlyZSgnLi9obWFjLmpzJyk7XHJcbi8vIHJlcXVpcmUoJy4vc2hhMS5qcycpO1xyXG5pbXBvcnQgQ3J5cHRvIGZyb20gJy4vY3J5cHRvJztcclxuXHJcbmNvbnNvbGUubG9nKGVudik7XHJcbmNvbnN0IHVwbG9hZEZpbGUgPSBmdW5jdGlvbiAocGFyYW1zOmFueSkge1xyXG4gIGlmICghcGFyYW1zLmZpbGVQYXRoIHx8IHBhcmFtcy5maWxlUGF0aC5sZW5ndGggPCA5KSB7XHJcbiAgICB3eC5zaG93TW9kYWwoe1xyXG4gICAgICB0aXRsZTogJ+WbvueJh+mUmeivrycsXHJcbiAgICAgIGNvbnRlbnQ6ICfor7fph43or5UnLFxyXG4gICAgICBzaG93Q2FuY2VsOiBmYWxzZSxcclxuICAgIH0pXHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNvbnNvbGUubG9nKFwicGFyYW1zLmZpbGVQYXRoXCIsIHBhcmFtcy5maWxlUGF0aClcclxuICBjb25zdCBhbGl5dW5GaWxlS2V5ID0gcGFyYW1zLmRpcjtcclxuICBjb25zdCBhbGl5dW5TZXJ2ZXJVUkwgPSBlbnYudXBsb2FkSW1hZ2VVcmw7XHJcbiAgY29uc3QgYWNjZXNzaWQgPSBlbnYuT1NTQWNjZXNzS2V5SWQ7XHJcbiAgY29uc3QgcG9saWN5QmFzZTY0ID0gZ2V0UG9saWN5QmFzZTY0KCk7XHJcbiAgY29uc3Qgc2lnbmF0dXJlID0gZ2V0U2lnbmF0dXJlKHBvbGljeUJhc2U2NCk7XHJcblxyXG4gIHd4LnVwbG9hZEZpbGUoe1xyXG4gICAgdXJsOiBhbGl5dW5TZXJ2ZXJVUkwsXHJcbiAgICBmaWxlUGF0aDogcGFyYW1zLmZpbGVQYXRoLFxyXG4gICAgbmFtZTogJ2ZpbGUnLFxyXG4gICAgZm9ybURhdGE6IHtcclxuICAgICAgLy8nbmFtZSc6IFwicGljdHVyZS5wbmdcIixcclxuICAgICAgJ2tleSc6IGFsaXl1bkZpbGVLZXksXHJcbiAgICAgICdwb2xpY3knOiBwb2xpY3lCYXNlNjQsXHJcbiAgICAgICdPU1NBY2Nlc3NLZXlJZCc6IGFjY2Vzc2lkLFxyXG4gICAgICAnc2lnbmF0dXJlJzogc2lnbmF0dXJlLFxyXG4gICAgICAnc3VjY2Vzc19hY3Rpb25fc3RhdHVzJzogJzIwMCcsXHJcbiAgICB9LFxyXG4gICAgc3VjY2VzczogZnVuY3Rpb24gKHJlcykge1xyXG4gICAgICBjb25zb2xlLmxvZygndXBsb2FkRmlsZSBwYXJhbXMnLCBwYXJhbXMpO1xyXG4gICAgICBjb25zb2xlLmxvZygndXBsb2FkRmlsZSBzdWNlc3MnLCByZXMpO1xyXG4gICAgICBpZiAocmVzLnN0YXR1c0NvZGUgIT0gMjAwKSB7XHJcbiAgICAgICAgaWYgKHBhcmFtcy5mYWlsKSB7XHJcbiAgICAgICAgICBwYXJhbXMuZmFpbChyZXMpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAocGFyYW1zLnN1Y2Nlc3MpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnYXJlIHlvdSBjb21pbmcuLi4nKVxyXG4gICAgICAgIHBhcmFtcy5zdWNjZXNzKGFsaXl1bkZpbGVLZXkpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZmFpbDogZnVuY3Rpb24gKGVycjogYW55KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCd1cGxvYWRGaWxlIGZpbGUnLCBlcnIpO1xyXG4gICAgICB1dGlscy5zaG93TW9kYWwoKTtcclxuICAgICAgZXJyLnd4YWRkaW5mbyA9IGFsaXl1blNlcnZlclVSTDtcclxuICAgICAgaWYgKHBhcmFtcy5mYWlsKSB7XHJcbiAgICAgICAgcGFyYW1zLmZhaWwoZXJyKVxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuICB9KVxyXG59XHJcblxyXG5jb25zdCBnZXRQb2xpY3lCYXNlNjQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gIGRhdGUuc2V0SG91cnMoZGF0ZS5nZXRIb3VycygpICsgZW52LnRpbWVvdXQpO1xyXG4gIGxldCBzcmNUID0gZGF0ZS50b0lTT1N0cmluZygpO1xyXG4gIGNvbnN0IHBvbGljeVRleHQgPSB7XHJcbiAgICBcImV4cGlyYXRpb25cIjogc3JjVCwgLy/orr7nva7or6VQb2xpY3nnmoTlpLHmlYjml7bpl7RcclxuICAgIFwiY29uZGl0aW9uc1wiOiBbXHJcbiAgICAgIFtcImNvbnRlbnQtbGVuZ3RoLXJhbmdlXCIsIDAsIDUgKiAxMDI0ICogMTAyNF0gLy8g6K6+572u5LiK5Lyg5paH5Lu255qE5aSn5bCP6ZmQ5Yi2LDVtYlxyXG4gICAgXVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IHBvbGljeUJhc2U2NCA9IEJhc2U2NC5lbmNvZGUoSlNPTi5zdHJpbmdpZnkocG9saWN5VGV4dCkpO1xyXG4gIHJldHVybiBwb2xpY3lCYXNlNjQ7XHJcbn1cclxuXHJcbmNvbnN0IGdldFNpZ25hdHVyZSA9IGZ1bmN0aW9uIChwb2xpY3lCYXNlNjQ6YW55KSB7XHJcbiAgY29uc3QgYWNjZXNza2V5ID0gZW52LkFjY2Vzc0tleVNlY3JldDtcclxuICBjb25zb2xlLmxvZygnQ3J5cHRvLlNIQTEnLCBDcnlwdG8uU0hBMSlcclxuICBjb25zdCBieXRlcyA9IENyeXB0by5ITUFDKENyeXB0by5TSEExLCBwb2xpY3lCYXNlNjQsIGFjY2Vzc2tleSwge1xyXG4gICAgYXNCeXRlczogdHJ1ZVxyXG4gIH0pO1xyXG4gIGNvbnN0IHNpZ25hdHVyZSA9IENyeXB0by51dGlsLmJ5dGVzVG9CYXNlNjQoYnl0ZXMpO1xyXG5cclxuICByZXR1cm4gc2lnbmF0dXJlO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1cGxvYWRGaWxlO1xyXG4iXX0=