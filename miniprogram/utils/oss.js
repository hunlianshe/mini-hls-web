"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../config");
const Base64_1 = require("./Base64");
const utils = require("../utils/utils");
const crypto_1 = require("./crypto");
console.log(config_1.default);
const uploadFile = function (params) {
    if (!params.filePath || params.filePath.length < 9) {
        wx.showModal({
            title: '图片错误',
            content: '请重试',
            showCancel: false,
        });
        return;
    }
    console.log("params.filePath", params.filePath);
    const aliyunFileKey = params.dir;
    const aliyunServerURL = config_1.default.uploadImageUrl;
    const accessid = config_1.default.OSSAccessKeyId;
    const policyBase64 = getPolicyBase64();
    const signature = getSignature(policyBase64);
    wx.uploadFile({
        url: aliyunServerURL,
        filePath: params.filePath,
        name: 'file',
        formData: {
            'key': aliyunFileKey,
            'policy': policyBase64,
            'OSSAccessKeyId': accessid,
            'signature': signature,
            'success_action_status': '200',
        },
        success: function (res) {
            console.log('uploadFile params', params);
            console.log('uploadFile sucess', res);
            if (res.statusCode != 200) {
                if (params.fail) {
                    params.fail(res);
                }
                return;
            }
            if (params.success) {
                params.success(aliyunFileKey);
            }
        },
        fail: function (err) {
            console.log('uploadFile file', err);
            utils.showModal();
            err.wxaddinfo = aliyunServerURL;
            if (params.fail) {
                params.fail(err);
            }
            ;
        },
    });
};
const getPolicyBase64 = function () {
    let date = new Date();
    date.setHours(date.getHours() + config_1.default.timeout);
    let srcT = date.toISOString();
    const policyText = {
        "expiration": srcT,
        "conditions": [
            ["content-length-range", 0, 5 * 1024 * 1024]
        ]
    };
    const policyBase64 = Base64_1.default.encode(JSON.stringify(policyText));
    return policyBase64;
};
const getSignature = function (policyBase64) {
    const accesskey = config_1.default.AccessKeySecret;
    const bytes = crypto_1.default.HMAC(crypto_1.default.SHA1, policyBase64, accesskey, {
        asBytes: true
    });
    const signature = crypto_1.default.util.bytesToBase64(bytes);
    return signature;
};
exports.default = uploadFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3NzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsib3NzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTRCO0FBRTVCLHFDQUErQjtBQUMvQix3Q0FBd0M7QUFJeEMscUNBQThCO0FBRTlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQUcsQ0FBQyxDQUFDO0FBQ2pCLE1BQU0sVUFBVSxHQUFHLFVBQVUsTUFBVTtJQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDbEQsRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUNYLEtBQUssRUFBRSxNQUFNO1lBQ2IsT0FBTyxFQUFFLEtBQUs7WUFDZCxVQUFVLEVBQUUsS0FBSztTQUNsQixDQUFDLENBQUE7UUFDRixPQUFPO0tBQ1I7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUMvQyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2pDLE1BQU0sZUFBZSxHQUFHLGdCQUFHLENBQUMsY0FBYyxDQUFDO0lBQzNDLE1BQU0sUUFBUSxHQUFHLGdCQUFHLENBQUMsY0FBYyxDQUFDO0lBQ3BDLE1BQU0sWUFBWSxHQUFHLGVBQWUsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUU3QyxFQUFFLENBQUMsVUFBVSxDQUFDO1FBQ1osR0FBRyxFQUFFLGVBQWU7UUFDcEIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRO1FBQ3pCLElBQUksRUFBRSxNQUFNO1FBQ1osUUFBUSxFQUFFO1lBRVIsS0FBSyxFQUFFLGFBQWE7WUFDcEIsUUFBUSxFQUFFLFlBQVk7WUFDdEIsZ0JBQWdCLEVBQUUsUUFBUTtZQUMxQixXQUFXLEVBQUUsU0FBUztZQUN0Qix1QkFBdUIsRUFBRSxLQUFLO1NBQy9CO1FBQ0QsT0FBTyxFQUFFLFVBQVUsR0FBRztZQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDdEMsSUFBSSxHQUFHLENBQUMsVUFBVSxJQUFJLEdBQUcsRUFBRTtnQkFDekIsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO29CQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7aUJBQ2pCO2dCQUNELE9BQU87YUFDUjtZQUNELElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtnQkFDbEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUMvQjtRQUNILENBQUM7UUFDRCxJQUFJLEVBQUUsVUFBVSxHQUFRO1lBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDcEMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2xCLEdBQUcsQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDO1lBQ2hDLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtnQkFDZixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2FBQ2pCO1lBQUEsQ0FBQztRQUNKLENBQUM7S0FDRixDQUFDLENBQUE7QUFDSixDQUFDLENBQUE7QUFFRCxNQUFNLGVBQWUsR0FBRztJQUN0QixJQUFJLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLGdCQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0MsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzlCLE1BQU0sVUFBVSxHQUFHO1FBQ2pCLFlBQVksRUFBRSxJQUFJO1FBQ2xCLFlBQVksRUFBRTtZQUNaLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQzdDO0tBQ0YsQ0FBQztJQUVGLE1BQU0sWUFBWSxHQUFHLGdCQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUMvRCxPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDLENBQUE7QUFFRCxNQUFNLFlBQVksR0FBRyxVQUFVLFlBQWdCO0lBQzdDLE1BQU0sU0FBUyxHQUFHLGdCQUFHLENBQUMsZUFBZSxDQUFDO0lBRXRDLE1BQU0sS0FBSyxHQUFHLGdCQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFNLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUU7UUFDOUQsT0FBTyxFQUFFLElBQUk7S0FDZCxDQUFDLENBQUM7SUFDSCxNQUFNLFNBQVMsR0FBRyxnQkFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFbkQsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyxDQUFBO0FBRUQsa0JBQWUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGVudiBmcm9tICcuLi9jb25maWcnO1xuXG5pbXBvcnQgQmFzZTY0IGZyb20gICcuL0Jhc2U2NCc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbi8vIHJlcXVpcmUoJy4vaG1hYy5qcycpO1xuLy8gcmVxdWlyZSgnLi9zaGExLmpzJyk7XG5pbXBvcnQgQ3J5cHRvIGZyb20gJy4vY3J5cHRvJztcblxuY29uc29sZS5sb2coZW52KTtcbmNvbnN0IHVwbG9hZEZpbGUgPSBmdW5jdGlvbiAocGFyYW1zOmFueSkge1xuICBpZiAoIXBhcmFtcy5maWxlUGF0aCB8fCBwYXJhbXMuZmlsZVBhdGgubGVuZ3RoIDwgOSkge1xuICAgIHd4LnNob3dNb2RhbCh7XG4gICAgICB0aXRsZTogJ+WbvueJh+mUmeivrycsXG4gICAgICBjb250ZW50OiAn6K+36YeN6K+VJyxcbiAgICAgIHNob3dDYW5jZWw6IGZhbHNlLFxuICAgIH0pXG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnNvbGUubG9nKFwicGFyYW1zLmZpbGVQYXRoXCIsIHBhcmFtcy5maWxlUGF0aClcbiAgY29uc3QgYWxpeXVuRmlsZUtleSA9IHBhcmFtcy5kaXI7XG4gIGNvbnN0IGFsaXl1blNlcnZlclVSTCA9IGVudi51cGxvYWRJbWFnZVVybDtcbiAgY29uc3QgYWNjZXNzaWQgPSBlbnYuT1NTQWNjZXNzS2V5SWQ7XG4gIGNvbnN0IHBvbGljeUJhc2U2NCA9IGdldFBvbGljeUJhc2U2NCgpO1xuICBjb25zdCBzaWduYXR1cmUgPSBnZXRTaWduYXR1cmUocG9saWN5QmFzZTY0KTtcblxuICB3eC51cGxvYWRGaWxlKHtcbiAgICB1cmw6IGFsaXl1blNlcnZlclVSTCxcbiAgICBmaWxlUGF0aDogcGFyYW1zLmZpbGVQYXRoLFxuICAgIG5hbWU6ICdmaWxlJyxcbiAgICBmb3JtRGF0YToge1xuICAgICAgLy8nbmFtZSc6IFwicGljdHVyZS5wbmdcIixcbiAgICAgICdrZXknOiBhbGl5dW5GaWxlS2V5LFxuICAgICAgJ3BvbGljeSc6IHBvbGljeUJhc2U2NCxcbiAgICAgICdPU1NBY2Nlc3NLZXlJZCc6IGFjY2Vzc2lkLFxuICAgICAgJ3NpZ25hdHVyZSc6IHNpZ25hdHVyZSxcbiAgICAgICdzdWNjZXNzX2FjdGlvbl9zdGF0dXMnOiAnMjAwJyxcbiAgICB9LFxuICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIGNvbnNvbGUubG9nKCd1cGxvYWRGaWxlIHBhcmFtcycsIHBhcmFtcyk7XG4gICAgICBjb25zb2xlLmxvZygndXBsb2FkRmlsZSBzdWNlc3MnLCByZXMpO1xuICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlICE9IDIwMCkge1xuICAgICAgICBpZiAocGFyYW1zLmZhaWwpIHtcbiAgICAgICAgICBwYXJhbXMuZmFpbChyZXMpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5zdWNjZXNzKSB7XG4gICAgICAgIHBhcmFtcy5zdWNjZXNzKGFsaXl1bkZpbGVLZXkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZmFpbDogZnVuY3Rpb24gKGVycjogYW55KSB7XG4gICAgICBjb25zb2xlLmxvZygndXBsb2FkRmlsZSBmaWxlJywgZXJyKTtcbiAgICAgIHV0aWxzLnNob3dNb2RhbCgpO1xuICAgICAgZXJyLnd4YWRkaW5mbyA9IGFsaXl1blNlcnZlclVSTDtcbiAgICAgIGlmIChwYXJhbXMuZmFpbCkge1xuICAgICAgICBwYXJhbXMuZmFpbChlcnIpXG4gICAgICB9O1xuICAgIH0sXG4gIH0pXG59XG5cbmNvbnN0IGdldFBvbGljeUJhc2U2NCA9IGZ1bmN0aW9uICgpIHtcbiAgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICBkYXRlLnNldEhvdXJzKGRhdGUuZ2V0SG91cnMoKSArIGVudi50aW1lb3V0KTtcbiAgbGV0IHNyY1QgPSBkYXRlLnRvSVNPU3RyaW5nKCk7XG4gIGNvbnN0IHBvbGljeVRleHQgPSB7XG4gICAgXCJleHBpcmF0aW9uXCI6IHNyY1QsIC8v6K6+572u6K+lUG9saWN555qE5aSx5pWI5pe26Ze0XG4gICAgXCJjb25kaXRpb25zXCI6IFtcbiAgICAgIFtcImNvbnRlbnQtbGVuZ3RoLXJhbmdlXCIsIDAsIDUgKiAxMDI0ICogMTAyNF0gLy8g6K6+572u5LiK5Lyg5paH5Lu255qE5aSn5bCP6ZmQ5Yi2LDVtYlxuICAgIF1cbiAgfTtcblxuICBjb25zdCBwb2xpY3lCYXNlNjQgPSBCYXNlNjQuZW5jb2RlKEpTT04uc3RyaW5naWZ5KHBvbGljeVRleHQpKTtcbiAgcmV0dXJuIHBvbGljeUJhc2U2NDtcbn1cblxuY29uc3QgZ2V0U2lnbmF0dXJlID0gZnVuY3Rpb24gKHBvbGljeUJhc2U2NDphbnkpIHtcbiAgY29uc3QgYWNjZXNza2V5ID0gZW52LkFjY2Vzc0tleVNlY3JldDtcblxuICBjb25zdCBieXRlcyA9IENyeXB0by5ITUFDKENyeXB0by5TSEExLCBwb2xpY3lCYXNlNjQsIGFjY2Vzc2tleSwge1xuICAgIGFzQnl0ZXM6IHRydWVcbiAgfSk7XG4gIGNvbnN0IHNpZ25hdHVyZSA9IENyeXB0by51dGlsLmJ5dGVzVG9CYXNlNjQoYnl0ZXMpO1xuXG4gIHJldHVybiBzaWduYXR1cmU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVwbG9hZEZpbGU7XG4iXX0=