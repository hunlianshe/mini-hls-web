"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Api = require("../../service/api.service");
const utils_1 = require("../../utils/utils");
const topMenuList_1 = require("./topMenuList");
const app = getApp();
Page({
    data: {
        userInfo: {},
        userList: [],
        curruserList: [],
        dataAlready: false,
        currentCity: "",
        selectValue: "",
        currentQrcode: "",
        currentPhone: "",
        phone: "",
        popHidden: true,
        pageLoaded: false,
        popWechat: false,
        currentPage: 1,
        pageSize: 10,
        totalCount: 0,
        pullDown: false,
        pullUp: false,
        showDialog: false,
        topMenuContent: {
            ageArray: topMenuList_1.getAgeMenuList(),
            heightArray: topMenuList_1.getHeightMenuList(),
            salaryArray: ["5千以下", "5千～1万", "1万～2万", "2万～5万", "5万以上"],
        },
        showSelect: false,
        optionType: '',
        selection: '',
    },
    onLoad() {
        let _this = this;
        wx.getStorage({
            key: "user",
            success: function (res) {
                _this.setData({
                    userInfo: res.data,
                });
            },
        });
        this.getUserList({});
        this.setData({
            pageLoaded: true,
        });
    },
    userDetail(e) {
        const { openid } = e.currentTarget.dataset;
        wx.navigateTo({
            url: `../userDetail/userDetail?openid=${openid}`,
        });
    },
    getUserList(params) {
        wx.showLoading({ title: '' });
        const { objectId } = params;
        Api.getUserList(params)
            .then((result) => {
            wx.hideLoading();
            this.setData({
                dataAlready: true,
            });
            if (result.code === 200) {
                let dataList = objectId ? this.data.userList : [];
                dataList = dataList.concat(result.data);
                dataList.map((data) => {
                    if (data.age && !data.age.toString().includes("岁")) {
                        data.age = data.age + "岁";
                    }
                });
                dataList.map((item) => {
                    if (item.photos && item.photos.length === 0) {
                        item.photos.push(item.avatarUrl);
                    }
                    item.intro = [];
                    if (item.age) {
                        item.intro.push(item.age);
                    }
                    if (item.jobGeneral) {
                        item.intro.push(item.jobGeneral);
                    }
                    if (item.jobDetail) {
                        item.intro.push(item.jobDetail);
                    }
                    if (item.education) {
                        item.intro.push(item.education);
                    }
                    item.intro = item.intro.join(" | ");
                });
                const { currentPage } = this.data;
                this.setData({
                    userList: dataList,
                    currentPage: currentPage + 1,
                });
            }
        })
            .catch((err) => {
            wx.hideLoading();
            console.log("get user List", err);
        });
    },
    goMatch() {
        let rightType = "fateMatch";
        if (utils_1.dealRightIntercept(rightType)) {
            this.setData({
                showDialog: true,
            });
            return;
        }
        utils_1.setRightStorage(rightType);
        let userInfo = app.globalData.userInfo;
        if (userInfo && userInfo.phone) {
            wx.navigateTo({
                url: "../matching/matching",
            });
        }
        else {
            wx.navigateTo({
                url: "../registerXz/registerXz",
            });
        }
    },
    onShow: function () {
        const { pageLoaded } = this.data;
        if (pageLoaded) {
            this.getUserList({});
        }
    },
    onPullDownRefresh: function () { },
    onReachBottom: function () {
        let rightType = "fateWatch";
        const { userList, currentPage, pageSize } = this.data;
        if (currentPage > 2 && utils_1.dealRightIntercept(rightType)) {
            this.setData({
                showDialog: true,
            });
            return;
        }
        utils_1.setRightStorage(rightType, currentPage * pageSize);
        const lastId = userList.length > 0 ? userList[userList.length - 1]._id : "";
        const { optionType, selection } = this.data;
        const params = this.dealWithRequestParameter(optionType, selection);
        params.objectId = lastId;
        this.getUserList(params);
    },
    closeDialog() {
        this.setData({
            showDialog: false,
        });
    },
    openSelect(e) {
        const optionTypedata = e.target.dataset.optionType;
        const { optionType } = this.data;
        if (optionTypedata === optionType) {
            this.setData({
                showSelect: false,
                optionType: '',
            });
            return;
        }
        this.setData({
            showSelect: true,
            optionType: optionTypedata,
        });
    },
    chooseTap(e) {
        const selectionData = e.target.dataset.selection;
        const selectionInit = this.data.selection;
        this.setData({
            selection: selectionData === selectionInit ? '' : selectionData,
        });
        const { optionType, selection } = this.data;
        const params = this.dealWithRequestParameter(optionType, selection);
        this.getUserList(params);
    },
    dealWithRequestParameter(optionType, selection) {
        const reqParams = {};
        switch (optionType) {
            case 'ageArray':
                reqParams.age = topMenuList_1.ageMenuList[selection];
                break;
            case 'heightArray':
                reqParams.height = topMenuList_1.heightMenuList[selection];
                break;
            case 'salaryArray':
                reqParams.salary = selection;
                break;
        }
        return reqParams;
    },
    onShareAppMessage: function (options) {
        console.log("onShareAppMessage options", options);
        return {};
    },
});
//# sourceMappingURL=data:application/json;base64,