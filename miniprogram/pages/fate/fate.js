"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Api = require("../../service/api.service");
const app = getApp();
Page({
    data: {
        userInfo: {},
        userList: [],
        curruserList: [],
        dataAlready: false,
        currentCity: '',
        selectValue: '',
        currentQrcode: '',
        currentPhone: '',
        phone: '',
        popHidden: true,
        pageLoaded: false,
        popWechat: false,
        currentPage: 1,
        pageSize: 10,
        totalCount: 0,
        pullDown: false,
        pullUp: false,
    },
    onLoad() {
        let _this = this;
        wx.getStorage({
            key: 'user',
            success: function (res) {
                _this.setData({
                    userInfo: res.data,
                });
            },
        });
        this.getUserList('');
        this.setData({
            pageLoaded: true,
        });
    },
    userDetail(e) {
        const { openid } = e.currentTarget.dataset;
        wx.navigateTo({
            url: `../userDetail/userDetail?openid=${openid}`,
        });
    },
    getUserList(objectId) {
        const params = { objectId };
        Api.getUserList(params).then((result) => {
            if (result.code === 200) {
                let dataList = this.data.userList;
                dataList = dataList.concat(result.data);
                this.setData({
                    userList: dataList,
                });
            }
        }).catch((err) => {
            console.log('get user List', err);
        });
    },
    goMatch() {
        let userInfo = app.globalData.userInfo;
        if (userInfo && userInfo.phone) {
            wx.navigateTo({
                url: '../matching/matching'
            });
        }
        else {
            wx.navigateTo({
                url: '../registerXz/registerXz'
            });
        }
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
        const { userList } = this.data;
        const lastId = userList.length > 0 ? userList[userList.length - 1]._id : '';
        this.getUserList(lastId);
    },
    onShareAppMessage: function (options) {
        console.log('onShareAppMessage options', options);
        return {};
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSxpREFBaUQ7QUFFakQsTUFBTSxHQUFHLEdBQUcsTUFBTSxFQUFVLENBQUM7QUFFN0IsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osUUFBUSxFQUFFLEVBQUU7UUFDWixRQUFRLEVBQUUsRUFBVztRQUNyQixZQUFZLEVBQUUsRUFBRTtRQUNoQixXQUFXLEVBQUUsS0FBSztRQUNsQixXQUFXLEVBQUUsRUFBRTtRQUNmLFdBQVcsRUFBRSxFQUFFO1FBQ2YsYUFBYSxFQUFFLEVBQUU7UUFDakIsWUFBWSxFQUFFLEVBQUU7UUFDaEIsS0FBSyxFQUFFLEVBQUU7UUFDVCxTQUFTLEVBQUUsSUFBSTtRQUNmLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLFNBQVMsRUFBRSxLQUFLO1FBQ2hCLFdBQVcsRUFBRSxDQUFDO1FBQ2QsUUFBUSxFQUFFLEVBQUU7UUFDWixVQUFVLEVBQUUsQ0FBQztRQUNiLFFBQVEsRUFBRSxLQUFLO1FBQ2YsTUFBTSxFQUFFLEtBQUs7S0FDZDtJQUVELE1BQU07UUFDSixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDakIsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBRSxNQUFNO1lBQ1gsT0FBTyxFQUFFLFVBQVMsR0FBRztnQkFDbkIsS0FBSyxDQUFDLE9BQVEsQ0FBQztvQkFDYixRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUk7aUJBQ25CLENBQUMsQ0FBQztZQUNMLENBQUM7U0FDRixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixVQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUE7SUFDSixDQUFDO0lBR0QsVUFBVSxDQUFDLENBQU07UUFDZixNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFDM0MsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBRSxtQ0FBbUMsTUFBTSxFQUFFO1NBQ2pELENBQUMsQ0FBQTtJQUlKLENBQUM7SUFLRCxXQUFXLENBQUMsUUFBZ0I7UUFDMUIsTUFBTSxNQUFNLEdBQUcsRUFBRSxRQUFRLEVBQUUsQ0FBQTtRQUMzQixHQUFHLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQVcsRUFBRSxFQUFFO1lBQzNDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxHQUFHLEVBQUU7Z0JBQ3ZCLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUNsQyxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3hDLElBQUksQ0FBQyxPQUFRLENBQUM7b0JBQ1osUUFBUSxFQUFFLFFBQVE7aUJBQ25CLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxRQUFRLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7UUFDdkMsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtZQUM5QixFQUFFLENBQUMsVUFBVSxDQUFDO2dCQUNaLEdBQUcsRUFBRSxzQkFBc0I7YUFDNUIsQ0FBQyxDQUFBO1NBQ0g7YUFBTTtZQUNMLEVBQUUsQ0FBQyxVQUFVLENBQUM7Z0JBQ1osR0FBRyxFQUFFLDBCQUEwQjthQUNoQyxDQUFDLENBQUE7U0FDSDtJQUNILENBQUM7SUFFRCxPQUFPLEVBQUU7SUFDVCxDQUFDO0lBS0QsTUFBTSxFQUFFO0lBS1IsQ0FBQztJQUtELE1BQU0sRUFBRTtJQUVSLENBQUM7SUFLRCxRQUFRLEVBQUU7SUFFVixDQUFDO0lBS0QsaUJBQWlCLEVBQUU7SUFPbkIsQ0FBQztJQUtELGFBQWEsRUFBRTtRQUNiLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQy9CLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtRQUMzRSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFLRCxpQkFBaUIsRUFBRSxVQUFVLE9BQWlEO1FBQzVFLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbEQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY29uc3Qge1xuLy8gICBjaXR5UmVwbGFjZSxcbi8vICAgc2hvd01vZGFsLFxuLy8gfSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3V0aWxzJyk7XG5pbXBvcnQgKiBhcyBBcGkgZnJvbSAnLi4vLi4vc2VydmljZS9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBJTXlBcHAgfSBmcm9tICcuLi8uLi9hcHAnO1xuY29uc3QgYXBwID0gZ2V0QXBwPElNeUFwcD4oKTtcblxuUGFnZSh7XG4gIGRhdGE6IHtcbiAgICB1c2VySW5mbzoge30sXG4gICAgdXNlckxpc3Q6IFtdIGFzIGFueVtdLFxuICAgIGN1cnJ1c2VyTGlzdDogW10sXG4gICAgZGF0YUFscmVhZHk6IGZhbHNlLFxuICAgIGN1cnJlbnRDaXR5OiAnJyxcbiAgICBzZWxlY3RWYWx1ZTogJycsXG4gICAgY3VycmVudFFyY29kZTogJycsXG4gICAgY3VycmVudFBob25lOiAnJyxcbiAgICBwaG9uZTogJycsXG4gICAgcG9wSGlkZGVuOiB0cnVlLFxuICAgIHBhZ2VMb2FkZWQ6IGZhbHNlLFxuICAgIHBvcFdlY2hhdDogZmFsc2UsXG4gICAgY3VycmVudFBhZ2U6IDEsXG4gICAgcGFnZVNpemU6IDEwLFxuICAgIHRvdGFsQ291bnQ6IDAsXG4gICAgcHVsbERvd246IGZhbHNlLFxuICAgIHB1bGxVcDogZmFsc2UsXG4gIH0sXG5cbiAgb25Mb2FkKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgd3guZ2V0U3RvcmFnZSh7XG4gICAgICBrZXk6ICd1c2VyJyxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlcykge1xuICAgICAgICBfdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgdXNlckluZm86IHJlcy5kYXRhLFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgdGhpcy5nZXRVc2VyTGlzdCgnJyk7XG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBwYWdlTG9hZGVkOiB0cnVlLFxuICAgIH0pXG4gIH0sXG5cbiAgLyoqIOivpuaDhSAqL1xuICB1c2VyRGV0YWlsKGU6IGFueSkge1xuICAgIGNvbnN0IHsgb3BlbmlkIH0gPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldDtcbiAgICB3eC5uYXZpZ2F0ZVRvKHtcbiAgICAgIHVybDogYC4uL3VzZXJEZXRhaWwvdXNlckRldGFpbD9vcGVuaWQ9JHtvcGVuaWR9YCxcbiAgICB9KVxuICAgIC8vIHd4Lm5hdmlnYXRlVG8oe1xuICAgIC8vICAgdXJsOiAnLi4vcmVnaXN0ZXJQaG9uZS9yZWdpc3RlclBob25lJyxcbiAgICAvLyB9KVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb2JqZWN0SWRcbiAgICovXG4gIGdldFVzZXJMaXN0KG9iamVjdElkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB7IG9iamVjdElkIH1cbiAgICBBcGkuZ2V0VXNlckxpc3QocGFyYW1zKS50aGVuKChyZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5jb2RlID09PSAyMDApIHtcbiAgICAgICAgbGV0IGRhdGFMaXN0ID0gdGhpcy5kYXRhLnVzZXJMaXN0O1xuICAgICAgICBkYXRhTGlzdCA9IGRhdGFMaXN0LmNvbmNhdChyZXN1bHQuZGF0YSk7XG4gICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgIHVzZXJMaXN0OiBkYXRhTGlzdCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2dldCB1c2VyIExpc3QnLCBlcnIpO1xuICAgIH0pXG4gIH0sXG5cbiAgZ29NYXRjaCgpIHtcbiAgICBsZXQgdXNlckluZm8gPSBhcHAuZ2xvYmFsRGF0YS51c2VySW5mbztcbiAgICBpZiAodXNlckluZm8gJiYgdXNlckluZm8ucGhvbmUpIHtcbiAgICAgIHd4Lm5hdmlnYXRlVG8oe1xuICAgICAgICB1cmw6ICcuLi9tYXRjaGluZy9tYXRjaGluZydcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHd4Lm5hdmlnYXRlVG8oe1xuICAgICAgICB1cmw6ICcuLi9yZWdpc3Rlclh6L3JlZ2lzdGVyWHonXG4gICAgICB9KVxuICAgIH1cbiAgfSxcblxuICBvblJlYWR5OiBmdW5jdGlvbiAoKSB7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5pi+56S6XG4gICAqL1xuICBvblNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBjb25zdCB7IHBhZ2VMb2FkZWQgfSA9IHRoaXMuZGF0YTtcbiAgICAvLyBpZiAocGFnZUxvYWRlZCkge1xuICAgIC8vICAgdGhpcy5nZXR1c2VyTGlzdCh7fSwgJzAnKTtcbiAgICAvLyB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i6ZqQ6JePXG4gICAqL1xuICBvbkhpZGU6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWNuOi9vVxuICAgKi9cbiAgb25VbmxvYWQ6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDkuIvmi4nliLfmlrBcbiAgICovXG4gIG9uUHVsbERvd25SZWZyZXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gdGhpcy5zZXREYXRhISh7XG4gICAgLy8gICBwdWxsRG93bjogdHJ1ZSxcbiAgICAvLyAgIHB1bGxVcDogZmFsc2VcbiAgICAvLyB9KTtcbiAgICAvLyB0aGlzLmdldFVzZXJMaXN0KCcnKTtcbiAgICAvLyB3eC5zdG9wUHVsbERvd25SZWZyZXNoKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOmhtemdouS4iuaLieinpuW6leS6i+S7tueahOWkhOeQhuWHveaVsFxuICAgKi9cbiAgb25SZWFjaEJvdHRvbTogZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHsgdXNlckxpc3QgfSA9IHRoaXMuZGF0YTtcbiAgICBjb25zdCBsYXN0SWQgPSB1c2VyTGlzdC5sZW5ndGggPiAwID8gdXNlckxpc3RbdXNlckxpc3QubGVuZ3RoIC0gMV0uX2lkIDogJydcbiAgICB0aGlzLmdldFVzZXJMaXN0KGxhc3RJZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUqOaIt+eCueWHu+WPs+S4iuinkuWIhuS6q1xuICAgKi9cbiAgb25TaGFyZUFwcE1lc3NhZ2U6IGZ1bmN0aW9uIChvcHRpb25zPzogUGFnZS5JU2hhcmVBcHBNZXNzYWdlT3B0aW9uIHwgdW5kZWZpbmVkKTogUGFnZS5JQ3VzdG9tU2hhcmVDb250ZW50IHtcbiAgICBjb25zb2xlLmxvZygnb25TaGFyZUFwcE1lc3NhZ2Ugb3B0aW9ucycsIG9wdGlvbnMpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSkiXX0=