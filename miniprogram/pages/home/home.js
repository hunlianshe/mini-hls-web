"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Api = require("../../service/api.service");
const app = getApp();
Page({
    data: {
        userInfo: {},
        psyTest: [],
        currShopList: [],
        dataAlready: false,
        currentCity: '',
        selectValue: '',
        currentQrcode: '',
        currentPhone: '',
        phone: '',
        popHidden: true,
        pageLoaded: false,
        popWechat: false,
        currentPage: 1,
        pageSize: 10,
        totalCount: 0,
        pullDown: false,
        pullUp: false,
        horoscopeData: {},
    },
    onLoad() {
        let _this = this;
        wx.getStorage({
            key: 'user',
            success: function (res) {
                _this.setData({
                    userInfo: res.data,
                });
                _this.getUserInfo();
            },
        });
        this.setData({
            pageLoaded: true,
        });
        this.getPsyList();
    },
    goXzys() {
        wx.navigateTo({
            url: `../xzys/xzys`,
        });
    },
    goXlcsList() {
        wx.navigateTo({
            url: `../xlcsList/xlcsList`,
        });
    },
    doTest(e) {
        wx.navigateTo({
            url: `../xlcsDetail/xlcsDetail?id=${e.currentTarget.dataset.id}`,
        });
    },
    goMatch() {
        wx.navigateTo({
            url: `../matcheXz/matcheXz`,
        });
    },
    getPsyList() {
        Api.getPsyList().then((result) => {
            this.setData({
                psyTest: result.data,
            });
        });
    },
    getHoroscopet(e) {
        const consName = this.data.userInfo.constellation || '白羊座';
        const { type } = e.currentTarget.dataset;
        wx.navigateTo({
            url: '../realXzysDetail/realXzysDetail?consName=' + consName + '&type=' + type
        });
    },
    getUserInfo() {
        const { openid } = this.data.userInfo;
        Api.getUserInfo(openid).then((result) => {
            if (result) {
                const userInfo = result.data;
                app.globalData.userInfo = result.data;
                this.setData({
                    userInfo,
                });
            }
        });
    },
    onReady: function () {
    },
    onShow: function () {
        this.getUserInfo();
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
        this.setData({
            pullDown: true,
            pullUp: false
        });
        wx.stopPullDownRefresh();
    },
    onReachBottom: function () {
        this.setData({
            pullDown: false,
            pullUp: true
        });
    },
    onShareAppMessage: function (options) {
        console.log('onShareAppMessage options', options);
        return {};
    }
});
//# sourceMappingURL=data:application/json;base64,