"use strict";
Page({
    data: {
        shopList: [],
        currShopList: [],
        dataAlready: false,
        currentCity: '',
        selectValue: '',
        currentQrcode: '',
        currentPhone: '',
        phone: '',
        popHidden: true,
        pageLoaded: false,
        popWechat: false,
        currentPage: 1,
        pageSize: 10,
        totalCount: 0,
        pullDown: false,
        pullUp: false,
    },
    onLoad() {
    },
    goXzys() {
        wx.navigateTo({
            url: `../xzys/xzys`,
        });
    },
    goXlcsList() {
        wx.navigateTo({
            url: `../xlcsList/xlcsList`,
        });
    },
    doTest() {
        wx.navigateTo({
            url: `../xlcsDetail/xlcsDetail`,
        });
    },
    goMatch() {
        wx.navigateTo({
            url: `../matcheXz/matcheXz`,
        });
    },
    goCarDetail(e) {
        wx.navigateTo({
            url: `../carDetail/carDetail?id=${e.currentTarget.dataset.id}`,
        });
    },
    doSearch(e) {
        const keyword = e.detail.value;
        const params = {
            keyword,
            needLoading: '1',
        };
        this.getShopList(params);
        this.setData({
            keyword,
            pullDown: false,
            pullUp: false,
        });
    },
    getShopList(params) {
        const totalCount = this.data.totalCount;
        const pageSize = this.data.pageSize;
        let currentPage = this.data.currentPage;
        const pullDown = this.data.pullDown;
        const pullUp = this.data.pullUp;
        if (pullDown && !pullUp && currentPage > 1) {
            --currentPage;
        }
        else if (!pullDown && pullUp) {
            let totalSize = pageSize * (currentPage + 1);
            if (totalSize > totalCount && currentPage > 1) {
                console.log('total size:', pageSize * (currentPage + 1));
                return;
            }
            ++currentPage;
        }
        else {
            console.log('其他情况，视为重新加载');
            currentPage = 1;
        }
        let p = {
            city: this.data.currentCity,
            currentPage,
            limit: pageSize,
        };
        console.log('Object.assign(p, params): ', Object.assign(p, params));
    },
    popPicker() {
        let popHidden = this.data.popHidden;
        this.setData({
            popHidden: !popHidden,
        });
    },
    doSelect(e) {
        if (e.detail.name) {
            this.setData({
                popHidden: true,
                currentCity: e.detail.name,
                pullDown: false,
                pullUp: false,
                currentPage: 1,
            });
            let params = {
                city: e.detail.name,
                needLoading: '1',
            };
            this.getShopList(params);
            wx.setStorage({
                key: 'currentCity',
                data: e.detail.name,
            });
        }
        else {
            this.setData({
                popHidden: true,
            });
        }
    },
    popWechat(e) {
        const currentQrcode = e.currentTarget.dataset.qrcode;
        const currentPhone = e.currentTarget.dataset.phone;
        this.setData({
            currentQrcode,
            currentPhone,
            popWechat: true
        });
    },
    closeWechat() {
        this.setData({
            popWechat: false
        });
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
        this.setData({
            pullDown: true,
            pullUp: false
        });
        this.getShopList({ needLoading: '1' });
        wx.stopPullDownRefresh();
    },
    onReachBottom: function () {
        this.setData({
            pullDown: false,
            pullUp: true
        });
        this.getShopList({ needLoading: '1' });
    },
    onShareAppMessage: function (options) {
        console.log('onShareAppMessage options', options);
        return {};
    }
});
//# sourceMappingURL=data:application/json;base64,