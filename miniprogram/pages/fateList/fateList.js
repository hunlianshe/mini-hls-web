"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Api = require("../../service/api.service");
const utils_1 = require("../../utils/utils");
const ChatService = require("../../service/chat.service");
Page({
    data: {
        _active: '1',
        listLikes: [],
        showDialog: false,
    },
    onLoad: function (options) {
        this.setData({
            _active: options.type,
        });
        this.getUsersListLikes(this.data._active);
    },
    onReady: function () {
    },
    getUsersListLikes(active) {
        let type = 'likeMe';
        switch (active) {
            case '1':
                type = 'meLike';
                break;
            case '2':
                type = 'likeMe';
                break;
            case '3':
                type = 'likeEachOther';
                break;
            default:
                break;
        }
        const params = { type, };
        Api.getUsersListLikes(params).then((result) => {
            if (result) {
                const listLikes = result.data;
                listLikes.forEach((like) => {
                    if (like.photos && like.photos.length) {
                        like.avatarUrl = like.photos[0];
                    }
                });
                this.setData({
                    listLikes,
                });
            }
        });
    },
    switchTab(e) {
        const index = e.currentTarget.dataset.index;
        this.setData({
            _active: index,
        });
        let rightType = '';
        if (index == 2) {
            rightType = 'whoLikeMe';
        }
        else if (index == 3) {
            rightType = 'likeEach';
        }
        if (utils_1.dealRightIntercept(rightType)) {
            this.setData({
                showDialog: true,
            });
            return;
        }
        utils_1.setRightStorage(rightType);
        this.getUsersListLikes(this.data._active);
    },
    closeDialog() {
        this.setData({
            showDialog: false,
        });
    },
    userDetail(e) {
        console.log('come in..... user detail');
        const { openid } = e.currentTarget.dataset;
        wx.navigateTo({
            url: `../userDetail/userDetail?openid=${openid}`,
        });
    },
    goChat(e) {
        console.log('come in..... go to chat');
        const { openid } = e.currentTarget.dataset;
        console.log(`fateList openid:`, e.currentTarget);
        ChatService.startSingleChatSession(openid);
    },
    onShow: function () { },
    onHide: function () { },
    onUnload: function () { },
    onPullDownRefresh: function () { },
    onReachBottom: function () { },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF0ZUxpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmYXRlTGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUFpRDtBQUNqRCw2Q0FBd0U7QUFDeEUsMERBQTBEO0FBRTFELElBQUksQ0FBQztJQUNILElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxHQUFHO1FBQ1osU0FBUyxFQUFFLEVBQVc7UUFDdEIsVUFBVSxFQUFFLEtBQUs7S0FDbEI7SUFFRCxNQUFNLEVBQUUsVUFBVSxPQUFZO1FBQzVCLElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUk7U0FDdEIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELE9BQU8sRUFBRTtJQUNULENBQUM7SUFHRCxpQkFBaUIsQ0FBQyxNQUFjO1FBQzlCLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUNwQixRQUFRLE1BQU0sRUFBRTtZQUNkLEtBQUssR0FBRztnQkFDTixJQUFJLEdBQUcsUUFBUSxDQUFDO2dCQUNoQixNQUFNO1lBQ1IsS0FBSyxHQUFHO2dCQUNOLElBQUksR0FBRyxRQUFRLENBQUM7Z0JBQ2hCLE1BQU07WUFDUixLQUFLLEdBQUc7Z0JBQ04sSUFBSSxHQUFHLGVBQWUsQ0FBQztnQkFDdkIsTUFBTTtZQUNSO2dCQUNFLE1BQU07U0FDVDtRQUNELE1BQU0sTUFBTSxHQUFHLEVBQUUsSUFBSSxHQUFHLENBQUE7UUFDeEIsR0FBRyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQVcsRUFBRSxFQUFFO1lBQ2pELElBQUksTUFBTSxFQUFFO2dCQUNWLE1BQU0sU0FBUyxHQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2xDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtvQkFDOUIsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO3dCQUNyQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7cUJBQ2hDO2dCQUNILENBQUMsQ0FBQyxDQUFBO2dCQUVGLElBQUksQ0FBQyxPQUFRLENBQUM7b0JBQ1osU0FBUztpQkFDVixDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUdELFNBQVMsQ0FBQyxDQUFNO1FBQ2QsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzVDLElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixPQUFPLEVBQUUsS0FBSztTQUNmLENBQUMsQ0FBQztRQUNILElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7WUFDZCxTQUFTLEdBQUcsV0FBVyxDQUFDO1NBQ3pCO2FBQU0sSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1lBQ3JCLFNBQVMsR0FBRyxVQUFVLENBQUM7U0FDeEI7UUFFRCxJQUFJLDBCQUFrQixDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxPQUFRLENBQUM7Z0JBQ1osVUFBVSxFQUFFLElBQUk7YUFDakIsQ0FBQyxDQUFBO1lBQ0YsT0FBTztTQUNSO1FBQ0QsdUJBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixVQUFVLEVBQUUsS0FBSztTQUNsQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBR0QsVUFBVSxDQUFDLENBQU07UUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUE7UUFDdkMsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO1FBQzNDLEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDWixHQUFHLEVBQUUsbUNBQW1DLE1BQU0sRUFBRTtTQUNqRCxDQUFDLENBQUE7SUFDSixDQUFDO0lBR0QsTUFBTSxDQUFDLENBQU07UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUE7UUFDdEMsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2pELFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQWM3QyxDQUFDO0lBRUQsTUFBTSxFQUFFLGNBQWEsQ0FBQztJQUV0QixNQUFNLEVBQUUsY0FBYSxDQUFDO0lBS3RCLFFBQVEsRUFBRSxjQUFhLENBQUM7SUFLeEIsaUJBQWlCLEVBQUUsY0FBYSxDQUFDO0lBS2pDLGFBQWEsRUFBRSxjQUFhLENBQUM7Q0FDOUIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQXBpIGZyb20gJy4uLy4uL3NlcnZpY2UvYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgZGVhbFJpZ2h0SW50ZXJjZXB0LCBzZXRSaWdodFN0b3JhZ2UgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgKiBhcyBDaGF0U2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlL2NoYXQuc2VydmljZSc7XG5cblBhZ2Uoe1xuICBkYXRhOiB7XG4gICAgX2FjdGl2ZTogJzEnLFxuICAgIGxpc3RMaWtlczogW10gYXMgYW55W10sXG4gICAgc2hvd0RpYWxvZzogZmFsc2UsXG4gIH0sXG5cbiAgb25Mb2FkOiBmdW5jdGlvbiAob3B0aW9uczogYW55KSB7XG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBfYWN0aXZlOiBvcHRpb25zLnR5cGUsXG4gICAgfSk7XG4gICAgdGhpcy5nZXRVc2Vyc0xpc3RMaWtlcyh0aGlzLmRhdGEuX2FjdGl2ZSk7XG4gIH0sXG5cbiAgb25SZWFkeTogZnVuY3Rpb24gKCkge1xuICB9LFxuXG4gIC8qKiDojrflj5blr7nlupTllpzmrKLnsbvliKvnmoTnlKjmiLfliJfooaggKi9cbiAgZ2V0VXNlcnNMaXN0TGlrZXMoYWN0aXZlOiBzdHJpbmcpIHtcbiAgICBsZXQgdHlwZSA9ICdsaWtlTWUnO1xuICAgIHN3aXRjaCAoYWN0aXZlKSB7XG4gICAgICBjYXNlICcxJzpcbiAgICAgICAgdHlwZSA9ICdtZUxpa2UnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzInOlxuICAgICAgICB0eXBlID0gJ2xpa2VNZSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnMyc6XG4gICAgICAgIHR5cGUgPSAnbGlrZUVhY2hPdGhlcic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtcyA9IHsgdHlwZSwgfVxuICAgIEFwaS5nZXRVc2Vyc0xpc3RMaWtlcyhwYXJhbXMpLnRoZW4oKHJlc3VsdDogYW55KSA9PiB7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IGxpc3RMaWtlczphbnkgPSByZXN1bHQuZGF0YTtcbiAgICAgICAgbGlzdExpa2VzLmZvckVhY2goKGxpa2U6IGFueSkgPT4ge1xuICAgICAgICAgIGlmIChsaWtlLnBob3RvcyAmJiBsaWtlLnBob3Rvcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxpa2UuYXZhdGFyVXJsID0gbGlrZS5waG90b3NbMF1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgICBsaXN0TGlrZXMsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKiDliIfmjaJ0YWIgKi9cbiAgc3dpdGNoVGFiKGU6IGFueSkge1xuICAgIGNvbnN0IGluZGV4ID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaW5kZXg7XG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBfYWN0aXZlOiBpbmRleCxcbiAgICB9KTtcbiAgICBsZXQgcmlnaHRUeXBlID0gJyc7XG4gICAgaWYgKGluZGV4ID09IDIpIHsgLy8g5Zac5qyi5oiRXG4gICAgICByaWdodFR5cGUgPSAnd2hvTGlrZU1lJztcbiAgICB9IGVsc2UgaWYgKGluZGV4ID09IDMpIHsgLy8g55u45LqS5Zac5qyiXG4gICAgICByaWdodFR5cGUgPSAnbGlrZUVhY2gnO1xuICAgIH1cbiAgICAvLyDlpITnkIbmi6bmiKrlubbov5Tlm57mmK/lkKbpnIDopoHooqvmi6bmiKpcbiAgICBpZiAoZGVhbFJpZ2h0SW50ZXJjZXB0KHJpZ2h0VHlwZSkpIHtcbiAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICBzaG93RGlhbG9nOiB0cnVlLFxuICAgICAgfSlcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0UmlnaHRTdG9yYWdlKHJpZ2h0VHlwZSk7XG4gICAgdGhpcy5nZXRVc2Vyc0xpc3RMaWtlcyh0aGlzLmRhdGEuX2FjdGl2ZSk7XG4gIH0sXG5cbiAgY2xvc2VEaWFsb2coKSB7XG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBzaG93RGlhbG9nOiBmYWxzZSxcbiAgICB9KTtcbiAgfSxcblxuICAvKiog6K+m5oOFICovXG4gIHVzZXJEZXRhaWwoZTogYW55KSB7XG4gICAgY29uc29sZS5sb2coJ2NvbWUgaW4uLi4uLiB1c2VyIGRldGFpbCcpXG4gICAgY29uc3QgeyBvcGVuaWQgfSA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0O1xuICAgIHd4Lm5hdmlnYXRlVG8oe1xuICAgICAgdXJsOiBgLi4vdXNlckRldGFpbC91c2VyRGV0YWlsP29wZW5pZD0ke29wZW5pZH1gLFxuICAgIH0pXG4gIH0sXG5cbiAgLyoqIOWOu+iBiuWkqSAqL1xuICBnb0NoYXQoZTogYW55KSB7XG4gICAgY29uc29sZS5sb2coJ2NvbWUgaW4uLi4uLiBnbyB0byBjaGF0JylcbiAgICBjb25zdCB7IG9wZW5pZCB9ID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQ7XG4gICAgY29uc29sZS5sb2coYGZhdGVMaXN0IG9wZW5pZDpgLCBlLmN1cnJlbnRUYXJnZXQpO1xuICAgIENoYXRTZXJ2aWNlLnN0YXJ0U2luZ2xlQ2hhdFNlc3Npb24ob3BlbmlkKTtcbiAgICAvLyBBcGkuc3RhcnRDaGF0U2Vzc2lvbih7XG4gICAgLy8gICB1c2VySWRzOiBbdGhpcy5kYXRhLm9wZW5pZF1cbiAgICAvLyB9KS50aGVuKChyZXN1bHQ6IGFueSkgPT4ge1xuICAgIC8vICAgaWYgKHJlc3VsdC5jb2RlID09IDIwMCkge1xuICAgIC8vICAgICBjb25zb2xlLmxvZyhgc3RhcnQgY2hhdCBzZXNzaW9uIHJlc3VsdGAsIHJlc3VsdC5kYXRhKTtcbiAgICAvLyAgICAgd3gubmF2aWdhdGVUbyh7XG4gICAgLy8gICAgICAgdXJsOiBgLi4vY2hhdC9jaGF0P29wZW5pZD0ke3RoaXMuZGF0YS5vcGVuaWR9JmNpZD0ke3Jlc3VsdC5kYXRhLl9pZH1gLFxuICAgIC8vICAgICB9KVxuICAgIC8vICAgfVxuICAgIC8vIH0pXG4gICAgLy8gd3gubmF2aWdhdGVUbyh7XG4gICAgLy8gICB1cmw6IGAuLi9jaGF0L2NoYXQ/b3BlbmlkPSR7b3BlbmlkfWAsXG4gICAgLy8gfSlcbiAgfSxcblxuICBvblNob3c6IGZ1bmN0aW9uICgpIHt9LFxuXG4gIG9uSGlkZTogZnVuY3Rpb24gKCkge30sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Y246L29XG4gICAqL1xuICBvblVubG9hZDogZnVuY3Rpb24gKCkge30sXG5cbiAgLyoqXG4gICAqIOmhtemdouebuOWFs+S6i+S7tuWkhOeQhuWHveaVsC0t55uR5ZCs55So5oi35LiL5ouJ5Yqo5L2cXG4gICAqL1xuICBvblB1bGxEb3duUmVmcmVzaDogZnVuY3Rpb24gKCkge30sXG5cbiAgLyoqXG4gICAqIOmhtemdouS4iuaLieinpuW6leS6i+S7tueahOWkhOeQhuWHveaVsFxuICAgKi9cbiAgb25SZWFjaEJvdHRvbTogZnVuY3Rpb24gKCkge30sXG59KSJdfQ==