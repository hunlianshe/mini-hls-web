"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Api = require("../../service/api.service");
const utils = require("../../utils/utils");
const jobJson_1 = require("../../public/json/jobJson");
const app = getApp();
Page({
    data: {
        userInfo: { openid: '' },
        nickName: '',
        weChatId: '',
        gender: '',
        birth: '',
        height: '',
        salary: '',
        region: [],
        workCity: '',
        workProvince: '',
        workRegion: '',
        isMarriage: '',
        education: '',
        hasChild: '',
        wantChild: '',
        jobGeneral: '',
        jobDetail: '',
        haveHouse: '',
        genderIndex: 0,
        salaryIndex: 0,
        dateNow: '',
        submitDisable: false,
        isMarriageArray: ['未婚', '离婚'],
        genderArray: ['男', '女'],
        salaryArray: [
            '5千以下', '5千～1万', '1万～2万', '2万～5万', '5万以上'
        ],
        educationArray: [
            '小学', '初中', '高中', '大专', '大学本科', '硕士', '博士'
        ],
        hasChildArray: ['否', '是'],
        wantChildArray: ['是', '否'],
        haveHouseArray: ['已买房', '未买房'],
        multiIndex: [,],
        multiArray: [[], []],
        jobJson: jobJson_1.default,
    },
    onLoad: function () {
        const multiArray = [[], []];
        jobJson_1.default.data.forEach((item) => {
            multiArray[0].push(item.name);
        });
        jobJson_1.default.data[0].data.forEach((item) => {
            multiArray[1].push(item.name);
        });
        console.log(multiArray);
        this.setData({
            multiArray,
            dateNow: this.getYMD(new Date())
        });
        this.getUserInfo();
    },
    getUserInfo() {
        const openid = app.globalData.userInfo.openid;
        Api.getUserInfo(openid || '').then((result) => {
            if (result) {
                this.setData({
                    userInfo: result.data,
                    nickName: result.data.nickName,
                    weChatId: result.data.weChatId,
                    gender: result.data.gender,
                    birth: result.data.birth ? this.getYMD(result.data.birth) : '',
                    height: result.data.height,
                    salary: result.data.salary,
                    workProvince: result.data.workProvince,
                    workCity: result.data.workCity,
                    workRegion: result.data.workRegion,
                    isMarriage: result.data.isMarriage,
                    education: result.data.education,
                    hasChild: result.data.hasChild,
                    wantChild: result.data.wantChild,
                    jobGeneral: result.data.jobGeneral,
                    jobDetail: result.data.jobDetail,
                    haveHouse: result.data.haveHouse,
                });
                console.log('data', this.data);
            }
        });
    },
    getYMD(dateStr) {
        const date = new Date(dateStr);
        const year = date.getFullYear();
        let month = date.getMonth() + 1;
        let monthStr = month <= 9 ? `0${month}` : month;
        let day = date.getDate();
        let dayStr = day <= 9 ? `0${day}` : day;
        return `${year}-${monthStr}-${dayStr}`;
    },
    onSubmit(e) {
        let that = this;
        const value = e.detail.value;
        if (!utils.validateEmpty(value.nickName, '请输入昵称') ||
            (!utils.validateEmpty(value.weChatId, '请输入微信号') ||
                !utils.validateEmpty(value.gender, '请选择性别') ||
                !utils.validateEmpty(value.birth, '请选择生日') ||
                !utils.validateEmpty(value.height, '请输入身高') ||
                !utils.validateEmpty(value.salary, '请选择收入') ||
                !utils.validateEmpty(this.data.workProvince, '请选择工作所在地') ||
                !utils.validateEmpty(this.data.education, '请选择学历') ||
                !utils.validateEmpty(this.data.isMarriage, '请选择婚姻状况') ||
                !utils.validateEmpty(this.data.hasChild, '请选择是否有孩子') ||
                !utils.validateEmpty(this.data.wantChild, '请选择是否想要孩子') ||
                !utils.validateEmpty(this.data.haveHouse, '请选择买房情况'))) {
            return false;
        }
        that.doSubmit(e);
    },
    doSubmit(e) {
        const params = e.detail.value;
        console.log(e.detail.value);
        const { userInfo } = this.data;
        const dataParams = {
            workProvince: this.data.workProvince,
            workCity: this.data.workCity,
            workRegion: this.data.workRegion,
            jobGeneral: this.data.jobGeneral,
            jobDetail: this.data.jobDetail,
        };
        this.setData({
            submitDisable: true
        });
        console.log(Object.assign(userInfo, params, dataParams));
        Api.updateUser(Object.assign(userInfo, params, dataParams)).then((result) => {
            wx.hideLoading();
            this.setData({
                submitDisable: true
            });
            if (result.code === 200) {
                wx.showToast({
                    title: '更新成功',
                    icon: 'success',
                    duration: 1000,
                    mask: true
                });
                setTimeout(() => {
                    wx.switchTab({
                        url: `../myHome/myHome`,
                    });
                }, 1000);
            }
            else {
                utils.showModal('系统异常，请稍后再试');
            }
        });
    },
    bindBirthChange(e) {
        this.setData({
            birth: e.detail.value
        });
    },
    bindEducationChange(e) {
        const { educationArray } = this.data;
        this.setData({
            education: educationArray[e.detail.value]
        });
    },
    bindMarriageChange(e) {
        const { isMarriageArray } = this.data;
        this.setData({
            isMarriage: isMarriageArray[e.detail.value]
        });
    },
    bindHasChildChange(e) {
        const { hasChildArray } = this.data;
        this.setData({
            hasChild: hasChildArray[e.detail.value]
        });
    },
    bindWantChildChange(e) {
        const { wantChildArray } = this.data;
        this.setData({
            wantChild: wantChildArray[e.detail.value]
        });
    },
    bindHaveHouseChange(e) {
        const { haveHouseArray } = this.data;
        this.setData({
            haveHouse: haveHouseArray[e.detail.value]
        });
    },
    bindGenderChange(e) {
        console.log('picker发送选择改变，携带值为', e.detail.value);
        this.setData({
            gender: parseInt(e.detail.value) + 1
        });
        console.log('parseInt(e.detail.value)', (parseInt(e.detail.value) + 1));
    },
    bindSalaryChange(e) {
        const { salaryArray } = this.data;
        this.setData({
            salary: salaryArray[e.detail.value]
        });
    },
    bindRegionChange: function (e) {
        console.log('picker发送选择改变，携带值为', e.detail.value);
        let region = e.detail.value;
        this.setData({
            region,
            workProvince: region[0],
            workCity: region[1],
            workRegion: region[2],
        });
    },
    bindMultiPickerChange: function (e) {
        console.log('picker发送选择改变，携带值为', e.detail.value);
        const { multiArray } = this.data;
        let multiIndex = e.detail.value;
        this.setData({
            multiIndex,
            jobGeneral: multiArray[0][multiIndex[0]],
            jobDetail: multiArray[1][multiIndex[1]],
        });
    },
    bindMultiPickerColumnChange: function (e) {
        console.log('修改的列为', e.detail.column, '，值为', e.detail.value);
        const { multiArray, multiIndex } = this.data;
        multiIndex[e.detail.column] = e.detail.value;
        if (e.detail.column === 0) {
            multiArray[1] = [];
            console.log(jobJson_1.default.data[multiIndex[0] || 0].data);
            jobJson_1.default.data[multiIndex[0] || 0].data.forEach((item) => {
                multiArray[1].push(item.name);
            });
        }
        this.setData({
            multiArray,
        });
    },
    bindDateChange: function (e) {
        console.log('picker发送选择改变，携带值为', e.detail.value);
        this.setData({
            date: e.detail.value
        });
    },
});
//# sourceMappingURL=data:application/json;base64,