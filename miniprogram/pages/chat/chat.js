"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const socket_service2_1 = require("../../service/socket.service2");
const utils_1 = require("../../utils/utils");
const Api = require("../../service/api.service");
Page({
    data: {
        openid: '',
        cid: '',
        me: {},
        host: '',
        toUser: {},
        userInfo: {},
        message: '',
        pagination: { pageSize: 50, pageToken: '' },
        messageList: [],
    },
    onLoad: function (options) {
        console.log("okkkk");
        let openid = options.openid;
        let cid = options.cid;
        this.setData({
            cid: cid
        });
        console.log("openid", openid);
        console.log("cid", cid);
        const user = wx.getStorageSync('user');
        console.log("user", user);
        this.setData({
            me: user
        });
        this.getToUserInfo(openid);
        this.getMessageList();
        this.receiveMessage();
    },
    getOpenid() {
        let openid = '';
        const user = wx.getStorageSync('user');
        openid = user.openid || '';
        return openid;
    },
    receiveMessage() {
        console.log("准备接收消息");
        let socket = socket_service2_1.getSocket();
        socket.on("privateChat", (msg) => {
            console.log("接收到的消息是", msg);
            var messageList = this.data.messageList;
            messageList.push(msg);
        });
    },
    getToUserInfo(openid) {
        Api.getUserInfo(openid).then((result) => {
            if (result) {
                const userInfo = result.data;
                console.log('userInfo:', userInfo);
                this.setData({
                    toUser: userInfo
                });
            }
            else {
                throw new Error("获取用户信息失败");
            }
        });
    },
    sendTap() {
        socket_service2_1.sendMessage({ cid: this.data.cid, msg: this.data.message, type: 1 });
        console.log('send message:', this.data.message);
        this.setChatSession();
    },
    setChatSession() {
        let chatSession = wx.getStorageSync('chatSession');
        let dateNow = new Date();
        if (chatSession.updateTime && chatSession.updateTime.toDateString() == dateNow.toDateString()) {
            if (chatSession.openidList) {
                const index = chatSession.openidList.findIndex((openid) => openid === this.data.openid);
                if (index) {
                    return;
                }
                else {
                    chatSession = {
                        updateTime: dateNow,
                        openidList: chatSession.openidList.push(this.data.openid)
                    };
                }
            }
        }
        else {
            chatSession = {
                updateTime: dateNow,
                openidList: [this.data.openid]
            };
        }
        console.log('chatSession:', chatSession);
        wx.setStorageSync("chatSession", chatSession);
        utils_1.setRightStorage('fateChat');
    },
    inputTap(e) {
        console.log('input message:', e);
        this.setData({
            message: e.detail.detail.value
        });
    },
    uploadImage(e) {
        console.log('upload image:', e.detail);
        socket_service2_1.sendMessage({ cid: this.data.cid, msg: e.detail, type: 2 });
    },
    getMessageList() {
        Api.getMessageByCid(this.data.cid, this.data.pagination.pageSize, this.data.pagination.pageToken).then((result) => {
            console.log("result.data", result.data);
            this.setData({
                pagination: {
                    pageToken: result.data.pageToken,
                    pageSize: 10
                }
            });
            let messageList = result.data.result;
            const dateAry = [];
            messageList.map((item) => {
                const date = utils_1.getDate(item.createdAt);
                if (dateAry.indexOf(date) == -1) {
                    item.date = date;
                    dateAry.push(date);
                }
                else {
                    item.date = '';
                }
                item.time = utils_1.getTime(item.createdAt);
                return item;
            });
            this.setData({
                messageList,
            });
        });
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNoYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtRUFBc0U7QUFDdEUsNkNBQXNFO0FBQ3RFLGlEQUFpRDtBQUVqRCxJQUFJLENBQUM7SUFDSCxJQUFJLEVBQUU7UUFDSixNQUFNLEVBQUUsRUFBRTtRQUNWLEdBQUcsRUFBRSxFQUFFO1FBQ1AsRUFBRSxFQUFFLEVBQUU7UUFDTixJQUFJLEVBQUUsRUFBRTtRQUNSLE1BQU0sRUFBRSxFQUFFO1FBQ1YsUUFBUSxFQUFFLEVBQUU7UUFDWixPQUFPLEVBQUUsRUFBRTtRQUNYLFVBQVUsRUFBRSxFQUFDLFFBQVEsRUFBRyxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBQztRQUMxQyxXQUFXLEVBQUUsRUFBRTtLQUNoQjtJQUVELE1BQU0sRUFBRSxVQUFVLE9BQVc7UUFFM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNwQixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzVCLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQVEsQ0FBQztZQUNaLEdBQUcsRUFBRSxHQUFHO1NBQ1QsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUMsTUFBTSxDQUFDLENBQUE7UUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUMsR0FBRyxDQUFDLENBQUE7UUFFdEIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBQyxJQUFJLENBQUMsQ0FBQTtRQUd4QixJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1osRUFBRSxFQUFFLElBQUk7U0FDVCxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FB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QUUsRUFBRTtpQkFDYjthQUNGLENBQUMsQ0FBQTtZQUNILElBQUssV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFBO1lBQ3BDLE1BQU0sT0FBTyxHQUFVLEVBQUUsQ0FBQztZQUMxQixXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUU7Z0JBQzVCLE1BQU0sSUFBSSxHQUFHLGVBQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3JDLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtvQkFDL0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7b0JBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3BCO3FCQUFNO29CQUNMLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO2lCQUNoQjtnQkFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLGVBQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3BDLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsT0FBUSxDQUFDO2dCQUNaLFdBQVc7YUFDWixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQTtJQUVKLENBQUM7SUFLRCxPQUFPLEVBQUU7SUFFVCxDQUFDO0lBS0QsTUFBTSxFQUFFO0lBRVIsQ0FBQztJQUtELE1BQU0sRUFBRTtJQUVSLENBQUM7SUFLRCxRQUFRLEVBQUU7SUFFVixDQUFDO0lBS0QsaUJBQWlCLEVBQUU7SUFFbkIsQ0FBQztJQUtELGFBQWEsRUFBRTtJQUVmLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dldFNvY2tldCwgc2VuZE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlL3NvY2tldC5zZXJ2aWNlMic7XG5pbXBvcnQgeyBnZXREYXRlLCBnZXRUaW1lLCBzZXRSaWdodFN0b3JhZ2UgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgKiBhcyBBcGkgZnJvbSAnLi4vLi4vc2VydmljZS9hcGkuc2VydmljZSc7XG5cblBhZ2Uoe1xuICBkYXRhOiB7XG4gICAgb3BlbmlkOiAnJywgLy8g5pS25L+h5Lq655qEb3BlbmlkXG4gICAgY2lkOiAnJyxcbiAgICBtZToge30sIC8v5oiR55qE55So5oi35L+h5oGvXG4gICAgaG9zdDogJycsIC8v5oiR55qE55So5oi35L+h5oGvXG4gICAgdG9Vc2VyOiB7fSwgLy/mjqXmlLbkurrnmoTnlKjmiLfkv6Hmga9cbiAgICB1c2VySW5mbzoge30sIC8vIOeUqOaIt+S/oeaBr1xuICAgIG1lc3NhZ2U6ICcnLCAgLy8g55So5oi36L6T5YWl55qE5raI5oGvXG4gICAgcGFnaW5hdGlvbjoge3BhZ2VTaXplIDogNTAsIHBhZ2VUb2tlbjogJyd9LFxuICAgIG1lc3NhZ2VMaXN0OiBbXSxcbiAgfSxcblxuICBvbkxvYWQ6IGZ1bmN0aW9uIChvcHRpb25zOmFueSkge1xuICAgIC8vIHRoaXMuZ2V0VXNlckluZm8oKTtcbiAgICBjb25zb2xlLmxvZyhcIm9ra2trXCIpXG4gICAgbGV0IG9wZW5pZCA9IG9wdGlvbnMub3BlbmlkO1xuICAgIGxldCBjaWQgPSBvcHRpb25zLmNpZDtcbiAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgIGNpZDogY2lkXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2coXCJvcGVuaWRcIixvcGVuaWQpXG4gICAgY29uc29sZS5sb2coXCJjaWRcIixjaWQpXG5cbiAgICBjb25zdCB1c2VyID0gd3guZ2V0U3RvcmFnZVN5bmMoJ3VzZXInKTtcbiAgICBjb25zb2xlLmxvZyhcInVzZXJcIix1c2VyKVxuICAgIC8vIG9wZW5pZCA9IHVzZXIub3BlbmlkIHx8ICcnO1xuICAgIC8vIHJldHVybiBvcGVuaWQ7XG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBtZTogdXNlclxuICAgIH0pO1xuXG4gICAgdGhpcy5nZXRUb1VzZXJJbmZvKG9wZW5pZCk7XG4gICAgdGhpcy5nZXRNZXNzYWdlTGlzdCgpO1xuICAgIHRoaXMucmVjZWl2ZU1lc3NhZ2UoKTtcbiAgXG4gIH0sXG5cbiAgZ2V0T3BlbmlkKCkge1xuICAgIGxldCBvcGVuaWQ6IHN0cmluZyA9ICcnO1xuICAgIGNvbnN0IHVzZXIgPSB3eC5nZXRTdG9yYWdlU3luYygndXNlcicpO1xuICAgIG9wZW5pZCA9IHVzZXIub3BlbmlkIHx8ICcnO1xuICAgIHJldHVybiBvcGVuaWQ7XG4gIH0sXG5cblxuXG4gIHJlY2VpdmVNZXNzYWdlKCkge1xuICAgIGNvbnNvbGUubG9nKFwi5YeG5aSH5o6l5pS25raI5oGvXCIpXG4gICBsZXQgc29ja2V0ID0gZ2V0U29ja2V0KClcbiAgIHNvY2tldC5vbihcInByaXZhdGVDaGF0XCIsIChtc2c6YW55KSA9PiB7XG4gICAgIGNvbnNvbGUubG9nKFwi5o6l5pS25Yiw55qE5raI5oGv5pivXCIsbXNnKVxuICAgICB2YXIgbWVzc2FnZUxpc3Q6IGFueSA9IHRoaXMuZGF0YS5tZXNzYWdlTGlzdDtcbiAgICAgbWVzc2FnZUxpc3QucHVzaChtc2cpO1xuICAgfSlcblxuICB9LFxuXG4gIC8vIOa2iOaBr+WvueaWueeahOS/oeaBr1xuICBnZXRUb1VzZXJJbmZvKG9wZW5pZDogc3RyaW5nKSB7XG4gICAgQXBpLmdldFVzZXJJbmZvKG9wZW5pZCkudGhlbigocmVzdWx0OiBhbnkpID0+IHtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgY29uc3QgdXNlckluZm8gPSByZXN1bHQuZGF0YTtcbiAgICAgICAgY29uc29sZS5sb2coJ3VzZXJJbmZvOicsIHVzZXJJbmZvKVxuICAgICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgICB0b1VzZXI6IHVzZXJJbmZvXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi6I635Y+W55So5oi35L+h5oGv5aSx6LSlXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKiDlj5HpgIHmtojmga/kuovku7YgKi9cbiAgc2VuZFRhcCgpIHtcbiAgICAvLyBUT0RPXG4gICAgLy8gdG8gZG9cbiAgICBzZW5kTWVzc2FnZSh7Y2lkOiB0aGlzLmRhdGEuY2lkLCBtc2c6IHRoaXMuZGF0YS5tZXNzYWdlLCB0eXBlOiAxfSk7XG4gICAgY29uc29sZS5sb2coJ3NlbmQgbWVzc2FnZTonLCB0aGlzLmRhdGEubWVzc2FnZSk7XG4gICAgdGhpcy5zZXRDaGF0U2Vzc2lvbigpO1xuICB9LFxuXG4gIHNldENoYXRTZXNzaW9uKCkge1xuICAgIGxldCBjaGF0U2Vzc2lvbiA9IHd4LmdldFN0b3JhZ2VTeW5jKCdjaGF0U2Vzc2lvbicpO1xuICAgIGxldCBkYXRlTm93ID0gbmV3IERhdGUoKTtcbiAgICAvLyDliKTmlq3mmK/lkKbmmK/lkIzkuIDlpKlcbiAgICBpZiAoY2hhdFNlc3Npb24udXBkYXRlVGltZSAmJiBjaGF0U2Vzc2lvbi51cGRhdGVUaW1lLnRvRGF0ZVN0cmluZygpID09IGRhdGVOb3cudG9EYXRlU3RyaW5nKCkpIHtcbiAgICAgIC8vIOWOu+mHjeWQjuWtmOWFpeiBiuWkqeS6uuWIl+ihqFxuICAgICAgaWYgKGNoYXRTZXNzaW9uLm9wZW5pZExpc3QpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBjaGF0U2Vzc2lvbi5vcGVuaWRMaXN0LmZpbmRJbmRleCgob3BlbmlkOiBhbnkpID0+IG9wZW5pZCA9PT0gdGhpcy5kYXRhLm9wZW5pZClcbiAgICAgICAgaWYgKGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYXRTZXNzaW9uID0ge1xuICAgICAgICAgICAgdXBkYXRlVGltZTogZGF0ZU5vdyxcbiAgICAgICAgICAgIG9wZW5pZExpc3Q6IGNoYXRTZXNzaW9uLm9wZW5pZExpc3QucHVzaCh0aGlzLmRhdGEub3BlbmlkKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjaGF0U2Vzc2lvbiA9IHtcbiAgICAgICAgdXBkYXRlVGltZTogZGF0ZU5vdyxcbiAgICAgICAgb3BlbmlkTGlzdDogW3RoaXMuZGF0YS5vcGVuaWRdXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCdjaGF0U2Vzc2lvbjonLCBjaGF0U2Vzc2lvbilcbiAgICB3eC5zZXRTdG9yYWdlU3luYyhcImNoYXRTZXNzaW9uXCIsIGNoYXRTZXNzaW9uKTtcbiAgICBzZXRSaWdodFN0b3JhZ2UoJ2ZhdGVDaGF0Jyk7XG4gIH0sXG5cbiAgLyoqIOi+k+WFpea2iOaBr+WGheWuuSAqL1xuICBpbnB1dFRhcChlOiBhbnkpIHtcbiAgICBjb25zb2xlLmxvZygnaW5wdXQgbWVzc2FnZTonLCBlKTtcbiAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgIG1lc3NhZ2U6IGUuZGV0YWlsLmRldGFpbC52YWx1ZSAvLyDojrflj5bovpPlhaXnmoTlgLxcbiAgICB9KVxuICB9LFxuXG4gICAvKiog6L6T5YWl5raI5oGv5YaF5a65ICovXG4gICB1cGxvYWRJbWFnZShlOiBhbnkpIHtcbiAgICBjb25zb2xlLmxvZygndXBsb2FkIGltYWdlOicsIGUuZGV0YWlsKTtcbiAgICBzZW5kTWVzc2FnZSh7Y2lkOiB0aGlzLmRhdGEuY2lkLCBtc2c6IGUuZGV0YWlsLCB0eXBlOiAyfSlcblxuICAgIC8vIHRoaXMuc2V0RGF0YSEoe1xuICAgIC8vICAgbWVzc2FnZTogZS5kZXRhaWwuZGV0YWlsLnZhbHVlIC8vIOiOt+WPlui+k+WFpeeahOWAvFxuICAgIC8vIH0pXG4gIH0sXG5cblxuICBnZXRNZXNzYWdlTGlzdCgpIHtcbiAgICAvLyBjb25zdCBtZXNzYWdlTGlzdDogYW55ID0gW1xuICAgIC8vICAge1xuICAgIC8vICAgICBcIl9pZFwiOiBcIjVmNjZlMmY4MjczNTI0OGMzMWI5N2JkOFwiLFxuICAgIC8vICAgICBcInR5cGVcIjogMSxcbiAgICAvLyAgICAgXCJjaWRcIjogXCI1ZjY2ZTAyNWJiOTczNTA5NDljNTJhOTdcIixcbiAgICAvLyAgICAgXCJtc2dcIjogXCJoZWxsbyBsaXNhXCIsXG4gICAgLy8gICAgIFwic3RhdHVzXCI6IFtcbiAgICAvLyAgICAgICB7XG4gICAgLy8gICAgICAgICBcIm1zZ1VuUmVhZFwiOiBmYWxzZSxcbiAgICAvLyAgICAgICAgIFwiX2lkXCI6IFwiNWY2NmUyZjgyNzM1MjQ4YzMxYjk3YmRhXCIsXG4gICAgLy8gICAgICAgICBcIm9wZW5pZFwiOiBcIm9IZ0I1NUxKMXdHbzJRcUVZeGdvOHRMTXhMNEFcIlxuICAgIC8vICAgICAgIH0sXG4gICAgLy8gICAgICAge1xuICAgIC8vICAgICAgICAgXCJtc2dVblJlYWRcIjogdHJ1ZSxcbiAgICAvLyAgICAgICAgIFwiX2lkXCI6IFwiNWY2NmUyZjgyNzM1MjQ4YzMxYjk3YmQ5XCIsXG4gICAgLy8gICAgICAgICBcIm9wZW5pZFwiOiBcIm9IZ0I1NUFsaEtxUjdhenI4NVlZQndmSUU5RVFcIlxuICAgIC8vICAgICAgIH1cbiAgICAvLyAgICAgXSxcbiAgICAvLyAgICAgXCJmcm9tXCI6IFwib0hnQjU1TEoxd0dvMlFxRVl4Z284dExNeEw0QVwiLFxuICAgIC8vICAgICBcInVwZGF0ZWRBdFwiOiBcIjIwMjAtMDktMjBUMDU6MDQ6NTYuNjg4WlwiLFxuICAgIC8vICAgICBcImNyZWF0ZWRBdFwiOiBcIjIwMjAtMDktMjBUMDU6MDQ6NTYuNjg4WlwiXG4gICAgLy8gICB9LFxuICAgIC8vICAge1xuICAgIC8vICAgICBcIl9pZFwiOiBcIjVmNjZlMmY4MjczNTI0OGMzMWI5N2JkOFwiLFxuICAgIC8vICAgICBcInR5cGVcIjogMSxcbiAgICAvLyAgICAgXCJjaWRcIjogXCI1ZjY2ZTAyNWJiOTczNTA5NDljNTJhOTdcIixcbiAgICAvLyAgICAgXCJtc2dcIjogXCLlkIPppa3kuoblkJdcIixcbiAgICAvLyAgICAgXCJzdGF0dXNcIjogW1xuICAgIC8vICAgICAgIHtcbiAgICAvLyAgICAgICAgIFwibXNnVW5SZWFkXCI6IGZhbHNlLFxuICAgIC8vICAgICAgICAgXCJfaWRcIjogXCI1ZjY2ZTJmODI3MzUyNDhjMzFiOTdiZGFcIixcbiAgICAvLyAgICAgICAgIFwib3BlbmlkXCI6IFwib0hnQjU1TEoxd0dvMlFxRVl4Z284dExNeEw0QVwiXG4gICAgLy8gICAgICAgfSxcbiAgICAvLyAgICAgICB7XG4gICAgLy8gICAgICAgICBcIm1zZ1VuUmVhZFwiOiB0cnVlLFxuICAgIC8vICAgICAgICAgXCJfaWRcIjogXCI1ZjY2ZTJmODI3MzUyNDhjMzFiOTdiZDlcIixcbiAgICAvLyAgICAgICAgIFwib3BlbmlkXCI6IFwib0hnQjU1QWxoS3FSN2F6cjg1WVlCd2ZJRTlFUVwiXG4gICAgLy8gICAgICAgfVxuICAgIC8vICAgICBdLFxuICAgIC8vICAgICBcImZyb21cIjogXCJvSGdCNTVBbGhLcVI3YXpyODVZWUJ3ZklFOUVRXCIsXG4gICAgLy8gICAgIFwidXBkYXRlZEF0XCI6IFwiMjAyMC0wOS0yMFQwNTowNDo1Ni42ODhaXCIsXG4gICAgLy8gICAgIFwiY3JlYXRlZEF0XCI6IFwiMjAyMC0wOS0yMFQwNTowNDo1Ni42ODhaXCJcbiAgICAvLyAgIH0sXG4gICAgLy8gXTtcbiAgICBBcGkuZ2V0TWVzc2FnZUJ5Q2lkKHRoaXMuZGF0YS5jaWQsIHRoaXMuZGF0YS5wYWdpbmF0aW9uLnBhZ2VTaXplLCB0aGlzLmRhdGEucGFnaW5hdGlvbi5wYWdlVG9rZW4pLnRoZW4oKHJlc3VsdDphbnkpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwicmVzdWx0LmRhdGFcIixyZXN1bHQuZGF0YSlcbiAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgcGFnZVRva2VuOiByZXN1bHQuZGF0YS5wYWdlVG9rZW4sXG4gICAgICAgICAgcGFnZVNpemU6IDEwXG4gICAgICAgIH0vLyDojrflj5bovpPlhaXnmoTlgLxcbiAgICAgIH0pXG4gICAgIGxldCAgbWVzc2FnZUxpc3QgPSByZXN1bHQuZGF0YS5yZXN1bHRcbiAgICAgIGNvbnN0IGRhdGVBcnk6IGFueVtdID0gW107XG4gICAgICBtZXNzYWdlTGlzdC5tYXAoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBkYXRlID0gZ2V0RGF0ZShpdGVtLmNyZWF0ZWRBdCk7XG4gICAgICAgIGlmIChkYXRlQXJ5LmluZGV4T2YoZGF0ZSkgPT0gLTEpIHtcbiAgICAgICAgICBpdGVtLmRhdGUgPSBkYXRlO1xuICAgICAgICAgIGRhdGVBcnkucHVzaChkYXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtLmRhdGUgPSAnJztcbiAgICAgICAgfVxuICAgICAgICBpdGVtLnRpbWUgPSBnZXRUaW1lKGl0ZW0uY3JlYXRlZEF0KTtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICBtZXNzYWdlTGlzdCxcbiAgICAgIH0pO1xuICAgIH0pXG4gIFxuICB9LFxuICBcbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yid5qyh5riy5p+T5a6M5oiQXG4gICAqL1xuICBvblJlYWR5OiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLmmL7npLpcbiAgICovXG4gIG9uU2hvdzogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i6ZqQ6JePXG4gICAqL1xuICBvbkhpZGU6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWNuOi9vVxuICAgKi9cbiAgb25VbmxvYWQ6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDpobXpnaLnm7jlhbPkuovku7blpITnkIblh73mlbAtLeebkeWQrOeUqOaIt+S4i+aLieWKqOS9nFxuICAgKi9cbiAgb25QdWxsRG93blJlZnJlc2g6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDpobXpnaLkuIrmi4nop6blupXkuovku7bnmoTlpITnkIblh73mlbBcbiAgICovXG4gIG9uUmVhY2hCb3R0b206IGZ1bmN0aW9uICgpIHtcblxuICB9LFxufSkiXX0=