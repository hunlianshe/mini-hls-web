"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const socket_service2_1 = require("../../service/socket.service2");
const utils_1 = require("../../utils/utils");
Page({
    data: {
        openid: '',
        userInfo: {},
        message: '',
        messageList: [],
    },
    onLoad: function () {
        this.getMessageList();
        this.receiveMessage();
    },
    getOpenid() {
        let openid = '';
        const user = wx.getStorageSync('user');
        openid = user.openid || '';
        return openid;
    },
    receiveMessage() {
        console.log("准备接收消息");
        let socket = socket_service2_1.getSocket();
        socket.on("privateChat", (msg) => {
            console.log("接收到的消息是", msg);
        });
    },
    getUserInfo() {
    },
    sendTap() {
        socket_service2_1.sendMessage({ cid: "oHgB55AlhKqR7azr85YYBwfIE9EQ", msg: this.data.message, type: 1 });
        console.log('send message:', this.data.message);
    },
    inputTap(e) {
        console.log('input message:', e);
        this.setData({
            message: e.detail.detail.value
        });
    },
    getMessageList() {
        const messageList = [
            {
                "_id": "5f66e2f82735248c31b97bd8",
                "type": 1,
                "cid": "5f66e025bb97350949c52a97",
                "msg": "hello lisa",
                "status": [
                    {
                        "msgUnRead": false,
                        "_id": "5f66e2f82735248c31b97bda",
                        "openid": "oHgB55LJ1wGo2QqEYxgo8tLMxL4A"
                    },
                    {
                        "msgUnRead": true,
                        "_id": "5f66e2f82735248c31b97bd9",
                        "openid": "oHgB55AlhKqR7azr85YYBwfIE9EQ"
                    }
                ],
                "from": "oHgB55LJ1wGo2QqEYxgo8tLMxL4A",
                "updatedAt": "2020-09-20T05:04:56.688Z",
                "createdAt": "2020-09-20T05:04:56.688Z"
            },
            {
                "_id": "5f66e2f82735248c31b97bd8",
                "type": 1,
                "cid": "5f66e025bb97350949c52a97",
                "msg": "吃饭了吗",
                "status": [
                    {
                        "msgUnRead": false,
                        "_id": "5f66e2f82735248c31b97bda",
                        "openid": "oHgB55LJ1wGo2QqEYxgo8tLMxL4A"
                    },
                    {
                        "msgUnRead": true,
                        "_id": "5f66e2f82735248c31b97bd9",
                        "openid": "oHgB55AlhKqR7azr85YYBwfIE9EQ"
                    }
                ],
                "from": "oHgB55AlhKqR7azr85YYBwfIE9EQ",
                "updatedAt": "2020-09-20T05:04:56.688Z",
                "createdAt": "2020-09-20T05:04:56.688Z"
            },
        ];
        const dateAry = [];
        messageList.map((item) => {
            const date = utils_1.getDate(item.createdAt);
            if (dateAry.indexOf(date) == -1) {
                item.date = date;
                dateAry.push(date);
            }
            else {
                item.date = '';
            }
            item.time = utils_1.getTime(item.createdAt);
            return item;
        });
        this.setData({
            messageList,
        });
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
});
//# sourceMappingURL=data:application/json;base64,