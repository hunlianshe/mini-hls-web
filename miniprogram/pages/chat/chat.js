"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const socket_service2_1 = require("../../service/socket.service2");
const utils_1 = require("../../utils/utils");
const Api = require("../../service/api.service");
Page({
    data: {
        openid: '',
        cid: '',
        me: {},
        host: '',
        toUser: {},
        userInfo: {},
        message: '',
        pagination: { pageSize: 50, pageToken: '' },
        messageList: [],
    },
    onLoad: function (options) {
        console.log("okkkk");
        let openid = options.openid;
        let cid = options.cid;
        this.setData({
            cid: cid
        });
        console.log("openid", openid);
        console.log("cid", cid);
        const user = wx.getStorageSync('user');
        console.log("user", user);
        this.setData({
            me: user
        });
        this.getToUserInfo(openid);
        this.getMessageList();
        this.receiveMessage();
    },
    getOpenid() {
        let openid = '';
        const user = wx.getStorageSync('user');
        openid = user.openid || '';
        return openid;
    },
    receiveMessage() {
        console.log("准备接收消息");
        let socket = socket_service2_1.getSocket();
        socket.on("privateChat", (msg) => {
            console.log("接收到的消息是", msg);
        });
    },
    getToUserInfo(openid) {
        Api.getUserInfo(openid).then((result) => {
            if (result) {
                const userInfo = result.data;
                console.log('userInfo:', userInfo);
                this.setData({
                    toUser: userInfo
                });
            }
            else {
                throw new Error("获取用户信息失败");
            }
        });
    },
    sendTap() {
        socket_service2_1.sendMessage({ cid: this.data.cid, msg: this.data.message, type: 1 });
        console.log('send message:', this.data.message);
        this.setChatSession();
    },
    setChatSession() {
        let chatSession = wx.getStorageSync('chatSession');
        let dateNow = new Date();
        if (chatSession.updateTime && chatSession.updateTime.toDateString() == dateNow.toDateString()) {
            if (chatSession.openidList) {
                const index = chatSession.openidList.findIndex((openid) => openid === this.data.openid);
                if (index) {
                    return;
                }
                else {
                    chatSession = {
                        updateTime: dateNow,
                        openidList: chatSession.openidList.push(this.data.openid)
                    };
                }
            }
        }
        else {
            chatSession = {
                updateTime: dateNow,
                openidList: [this.data.openid]
            };
        }
        console.log('chatSession:', chatSession);
        wx.setStorageSync("chatSession", chatSession);
        utils_1.setRightStorage('fateChat');
    },
    inputTap(e) {
        console.log('input message:', e);
        this.setData({
            message: e.detail.detail.value
        });
    },
    uploadImage(e) {
        console.log('upload image:', e.detail);
        socket_service2_1.sendMessage({ cid: this.data.cid, msg: e.detail, type: 2 });
    },
    getMessageList() {
        Api.getMessageByCid(this.data.cid, this.data.pagination.pageSize, this.data.pagination.pageToken).then((result) => {
            console.log("result.data", result.data);
            this.setData({
                pagination: {
                    pageToken: result.data.pageToken
                }
            });
            let messageList = result.data.result;
            const dateAry = [];
            messageList.map((item) => {
                const date = utils_1.getDate(item.createdAt);
                if (dateAry.indexOf(date) == -1) {
                    item.date = date;
                    dateAry.push(date);
                }
                else {
                    item.date = '';
                }
                item.time = utils_1.getTime(item.createdAt);
                return item;
            });
            this.setData({
                messageList,
            });
        });
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
});
//# sourceMappingURL=data:application/json;base64,