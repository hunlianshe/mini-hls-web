"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const socket_service2_1 = require("../../service/socket.service2");
const utils_1 = require("../../utils/utils");
const Api = require("../../service/api.service");
const ChatService = require("../../service/chat.service");
Page({
    data: {
        openid: '',
        cid: '',
        me: {},
        host: '',
        toUser: {},
        userInfo: {},
        message: '',
        pagination: { pageSize: 10, pageToken: '' },
        messageList: [],
    },
    onLoad: function (options) {
        console.log("okkkk");
        console.log(options);
        let openid = options.openid;
        let cid = options.cid;
        this.setData({
            cid: cid,
            openid: openid,
        });
        console.log("openid", openid);
        console.log("cid", cid);
        console.log("cid", cid);
        const user = wx.getStorageSync('user');
        console.log("user", user);
        this.setData({
            me: user
        });
        this.readAllMessage();
        this.getToUserInfo(openid);
        const { pagination } = this.data;
        this.getMessageList(pagination.pageSize, pagination.pageToken);
        this.receiveMessage();
    },
    readAllMessage() {
        ChatService.updateMsgToReadStatus(this.data.cid);
    },
    getOpenid() {
        let openid = '';
        const user = wx.getStorageSync('user');
        openid = user.openid || '';
        return openid;
    },
    receiveMessage() {
        function getRandom(num) {
            return Math.floor((Math.random() + Math.floor(Math.random() * 9 + 1)) * Math.pow(10, num - 1));
        }
        console.log("准备接收消息");
        let socket = socket_service2_1.getSocket();
        socket.on("privateChat", (msg) => {
            console.log("接收到的消息是", msg);
            var messageList = this.data.messageList;
            console.log("getRandom(10)", getRandom(10));
            msg._id = getRandom(10);
            messageList.push(msg);
            console.log("`item${messageList.length}`", messageList.length);
            this.setData({ messageList });
            let toLast = `item${messageList.length}`;
            console.log('toLast', toLast);
            this.setData({
                scrollTop: 1000 * messageList.length
            });
        });
    },
    getToUserInfo(openid) {
        Api.getUserInfo(openid).then((result) => {
            if (result) {
                const userInfo = result.data;
                console.log('userInfo:', userInfo);
                this.setData({
                    toUser: userInfo
                });
            }
            else {
                throw new Error("获取用户信息失败");
            }
        });
    },
    sendTap() {
        socket_service2_1.sendMessage({ cid: this.data.cid, msg: this.data.message, type: 1 });
        console.log('send message:', this.data.message);
        this.setChatSession();
    },
    setChatSession() {
        let chatSession = wx.getStorageSync('chatSession');
        let dateNow = new Date();
        if (chatSession && chatSession.updateTime && new Date(chatSession.updateTime).toDateString() == dateNow.toDateString()) {
            if (chatSession.openidList && chatSession.openidList.length > 0) {
                const index = chatSession.openidList.findIndex((openid) => openid === this.data.openid);
                if (index !== -1) {
                    return;
                }
                else {
                    chatSession.openidList.push(this.data.openid);
                    chatSession = {
                        updateTime: dateNow,
                        openidList: chatSession.openidList,
                    };
                }
            }
        }
        else {
            chatSession = {
                updateTime: dateNow,
                openidList: [this.data.openid]
            };
        }
        wx.setStorageSync("chatSession", chatSession);
    },
    inputTap(e) {
        console.log('input message:', e);
        this.setData({
            message: e.detail.detail.value
        });
    },
    uploadImage(e) {
        console.log('upload image:', e.detail);
        socket_service2_1.sendMessage({ cid: this.data.cid, msg: e.detail, type: 2 });
    },
    getMessageList(pageSize, pageToken) {
        Api.getMessageByCid(this.data.cid, pageSize, pageToken).then((result) => {
            console.log("result.data", result.data);
            let resultList = result.data.result;
            let lastId = result.data.nextPageToken;
            this.setData({
                pagination: {
                    pageToken: lastId,
                    pageSize: 10
                }
            });
            const dateAry = [];
            resultList = resultList.reverse();
            let { messageList } = this.data;
            messageList = resultList.concat(messageList);
            messageList.map((item) => {
                const date = utils_1.getDate(item.createdAt);
                if (dateAry.indexOf(date) == -1) {
                    item.date = date;
                    dateAry.push(date);
                }
                else {
                    item.date = '';
                }
                item.time = utils_1.getTime(item.createdAt);
                return item;
            });
            this.setData({
                messageList
            });
        });
    },
    onPageScroll: function (res) {
        const { pagination } = this.data;
        if (res.scrollTop === 0 && pagination.pageToken !== '') {
            this.getMessageList(pagination.pageSize, pagination.pageToken);
        }
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
        console.log('chat page unload', this.data.cid);
        ChatService.updateMsgToReadStatus(this.data.cid);
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
});
//# sourceMappingURL=data:application/json;base64,