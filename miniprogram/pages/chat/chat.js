"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const socket_service2_1 = require("../../service/socket.service2");
const utils_1 = require("../../utils/utils");
const Api = require("../../service/api.service");
const ChatService = require("../../service/chat.service");
Page({
    data: {
        openid: '',
        cid: '',
        me: {},
        host: '',
        toUser: {},
        userInfo: {},
        message: '',
        pagination: { pageSize: 10, pageToken: '' },
        messageList: [],
    },
    onLoad: function (options) {
        let openid = options.openid;
        let cid = options.cid;
        this.setData({
            cid: cid,
            openid: openid,
        });
        const user = wx.getStorageSync('user');
        this.setData({
            me: user
        });
        this.readAllMessage();
        this.getToUserInfo(openid);
        const { pagination } = this.data;
        this.getMessageList(pagination.pageSize, pagination.pageToken);
        this.receiveMessage();
    },
    readAllMessage() {
        ChatService.updateMsgToReadStatus(this.data.cid);
    },
    getOpenid() {
        let openid = '';
        const user = wx.getStorageSync('user');
        openid = user.openid || '';
        return openid;
    },
    receiveMessage() {
        function getRandom(num) {
            return Math.floor((Math.random() + Math.floor(Math.random() * 9 + 1)) * Math.pow(10, num - 1));
        }
        console.log("准备接收消息");
        let socket = socket_service2_1.getSocket();
        socket.on("privateChat", (msg) => {
            console.log("接收到的消息是", msg);
            var messageList = this.data.messageList;
            console.log("getRandom(10)", getRandom(10));
            msg._id = getRandom(10);
            messageList.push(msg);
            console.log("`item${messageList.length}`", messageList.length);
            this.setData({ messageList });
            let toLast = `item${messageList.length}`;
            console.log('toLast', toLast);
            this.setData({
                scrollTop: 1000 * messageList.length
            });
        });
    },
    getToUserInfo(openid) {
        Api.getUserInfo(openid).then((result) => {
            if (result) {
                const userInfo = result.data;
                this.setData({
                    toUser: userInfo
                });
            }
            else {
                throw new Error("获取用户信息失败");
            }
        });
    },
    sendTap() {
        socket_service2_1.sendMessage({ cid: this.data.cid, msg: this.data.message, type: 1 });
        this.setChatSession();
    },
    setChatSession() {
        let chatSession = wx.getStorageSync('chatSession');
        let dateNow = new Date();
        if (chatSession && chatSession.updateTime && new Date(chatSession.updateTime).toDateString() == dateNow.toDateString()) {
            if (chatSession.openidList && chatSession.openidList.length > 0) {
                const index = chatSession.openidList.findIndex((openid) => openid === this.data.openid);
                if (index !== -1) {
                    return;
                }
                else {
                    chatSession.openidList.push(this.data.openid);
                    chatSession = {
                        updateTime: dateNow,
                        openidList: chatSession.openidList,
                    };
                }
            }
        }
        else {
            chatSession = {
                updateTime: dateNow,
                openidList: [this.data.openid]
            };
        }
        wx.setStorageSync("chatSession", chatSession);
    },
    inputTap(e) {
        this.setData({
            message: e.detail.detail.value
        });
    },
    uploadImage(e) {
        socket_service2_1.sendMessage({ cid: this.data.cid, msg: e.detail, type: 2 });
    },
    getMessageList(pageSize, pageToken) {
        Api.getMessageByCid(this.data.cid, pageSize, pageToken).then((result) => {
            let resultList = result.data.result;
            let lastId = result.data.nextPageToken;
            this.setData({
                pagination: {
                    pageToken: lastId,
                    pageSize: 10
                }
            });
            const dateAry = [];
            resultList = resultList.reverse();
            let { messageList } = this.data;
            messageList = resultList.concat(messageList);
            messageList.map((item) => {
                const date = utils_1.getDate(item.createdAt);
                if (dateAry.indexOf(date) == -1) {
                    item.date = date;
                    dateAry.push(date);
                }
                else {
                    item.date = '';
                }
                item.time = utils_1.getTime(item.createdAt);
                return item;
            });
            this.setData({
                messageList
            });
        });
    },
    onRefresh: function (e) {
        console.log('onRefresh', e);
        console.log('onRefresh', e.detail.scrollTop);
        const { pagination } = this.data;
        if (e.detail.scrollTop === 0 && pagination.pageToken !== '') {
            this.getMessageList(pagination.pageSize, pagination.pageToken);
        }
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
        ChatService.updateMsgToReadStatus(this.data.cid);
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNoYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtRUFBc0U7QUFDdEUsNkNBQXFEO0FBQ3JELGlEQUFpRDtBQUNqRCwwREFBMEQ7QUFFMUQsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osTUFBTSxFQUFFLEVBQUU7UUFDVixHQUFHLEVBQUUsRUFBRTtRQUNQLEVBQUUsRUFBRSxFQUFFO1FBQ04sSUFBSSxFQUFFLEVBQUU7UUFDUixNQUFNLEVBQUUsRUFBRTtRQUNWLFFBQVEsRUFBRSxFQUFFO1FBQ1osT0FBTyxFQUFFLEVBQUU7UUFDWCxVQUFVLEVBQUUsRUFBQyxRQUFRLEVBQUcsRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUM7UUFDMUMsV0FBVyxFQUFFLEVBQUU7S0FDaEI7SUFFRCxNQUFNLEVBQUUsVUFBVSxPQUFXO1FBRTNCLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDNUIsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUN0QixJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1osR0FBRyxFQUFFLEdBQUc7WUFDUixNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUMsQ0FBQztRQUVILE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLE9BQVEsQ0FBQztZQUNaLEVBQUUsRUFBRSxJQUFJO1NBQ1QsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRXRCLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDakMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztR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IH0gZnJvbSAnLi4vLi4vc2VydmljZS9zb2NrZXQuc2VydmljZTInO1xuaW1wb3J0IHsgZ2V0RGF0ZSwgZ2V0VGltZSB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCAqIGFzIEFwaSBmcm9tICcuLi8uLi9zZXJ2aWNlL2FwaS5zZXJ2aWNlJztcbmltcG9ydCAqIGFzIENoYXRTZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2UvY2hhdC5zZXJ2aWNlJztcblxuUGFnZSh7XG4gIGRhdGE6IHtcbiAgICBvcGVuaWQ6ICcnLCAvLyDmlLbkv6HkurrnmoRvcGVuaWRcbiAgICBjaWQ6ICcnLFxuICAgIG1lOiB7fSwgLy8g5oiR55qE55So5oi35L+h5oGvXG4gICAgaG9zdDogJycsIC8vIOaIkeeahOeUqOaIt+S/oeaBr1xuICAgIHRvVXNlcjoge30sIC8vIOaOpeaUtuS6uueahOeUqOaIt+S/oeaBr1xuICAgIHVzZXJJbmZvOiB7fSwgLy8g55So5oi35L+h5oGvXG4gICAgbWVzc2FnZTogJycsICAvLyDnlKjmiLfovpPlhaXnmoTmtojmga9cbiAgICBwYWdpbmF0aW9uOiB7cGFnZVNpemUgOiAxMCwgcGFnZVRva2VuOiAnJ30sXG4gICAgbWVzc2FnZUxpc3Q6IFtdLFxuICB9LFxuXG4gIG9uTG9hZDogZnVuY3Rpb24gKG9wdGlvbnM6YW55KSB7XG4gICAgLy8gdGhpcy5nZXRVc2VySW5mbygpO1xuICAgIGxldCBvcGVuaWQgPSBvcHRpb25zLm9wZW5pZDtcbiAgICBsZXQgY2lkID0gb3B0aW9ucy5jaWQ7XG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBjaWQ6IGNpZCxcbiAgICAgIG9wZW5pZDogb3BlbmlkLFxuICAgIH0pO1xuXG4gICAgY29uc3QgdXNlciA9IHd4LmdldFN0b3JhZ2VTeW5jKCd1c2VyJyk7XG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBtZTogdXNlclxuICAgIH0pO1xuICAgIHRoaXMucmVhZEFsbE1lc3NhZ2UoKTtcblxuICAgIHRoaXMuZ2V0VG9Vc2VySW5mbyhvcGVuaWQpO1xuICAgIGNvbnN0IHsgcGFnaW5hdGlvbiB9ID0gdGhpcy5kYXRhO1xuICAgIHRoaXMuZ2V0TWVzc2FnZUxpc3QocGFnaW5hdGlvbi5wYWdlU2l6ZSwgcGFnaW5hdGlvbi5wYWdlVG9rZW4pO1xuICAgIHRoaXMucmVjZWl2ZU1lc3NhZ2UoKTtcbiAgfSxcblxuICAvLyDorr7nva7mtojmga/lt7Lor7tcbiAgcmVhZEFsbE1lc3NhZ2UoKSB7XG4gICAgQ2hhdFNlcnZpY2UudXBkYXRlTXNnVG9SZWFkU3RhdHVzKHRoaXMuZGF0YS5jaWQpO1xuICB9LFxuXG4gIGdldE9wZW5pZCgpIHtcbiAgICBsZXQgb3BlbmlkOiBzdHJpbmcgPSAnJztcbiAgICBjb25zdCB1c2VyID0gd3guZ2V0U3RvcmFnZVN5bmMoJ3VzZXInKTtcbiAgICBvcGVuaWQgPSB1c2VyLm9wZW5pZCB8fCAnJztcbiAgICByZXR1cm4gb3BlbmlkO1xuICB9LFxuXG5cblxuICByZWNlaXZlTWVzc2FnZSgpIHtcbiAgICBmdW5jdGlvbiBnZXRSYW5kb20obnVtOiBhbnkpe1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkrTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjkrMSkpKk1hdGgucG93KDEwLG51bS0xKSk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwi5YeG5aSH5o6l5pS25raI5oGvXCIpXG4gICAgbGV0IHNvY2tldCA9IGdldFNvY2tldCgpXG4gICAgc29ja2V0Lm9uKFwicHJpdmF0ZUNoYXRcIiwgKG1zZzphbnkpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwi5o6l5pS25Yiw55qE5raI5oGv5pivXCIsbXNnKVxuICAgICAgdmFyIG1lc3NhZ2VMaXN0OiBhbnkgPSB0aGlzLmRhdGEubWVzc2FnZUxpc3Q7XG4gICAgICBjb25zb2xlLmxvZyhcImdldFJhbmRvbSgxMClcIixnZXRSYW5kb20oMTApKTtcbiAgICAgIG1zZy5faWQgPSBnZXRSYW5kb20oMTApXG4gICAgICBtZXNzYWdlTGlzdC5wdXNoKG1zZyk7XG4gICAgICBjb25zb2xlLmxvZyhcImBpdGVtJHttZXNzYWdlTGlzdC5sZW5ndGh9YFwiLG1lc3NhZ2VMaXN0Lmxlbmd0aClcbiAgICAgIHRoaXMuc2V0RGF0YSEoe21lc3NhZ2VMaXN0fSlcbiAgICAgIGxldCB0b0xhc3QgPSBgaXRlbSR7bWVzc2FnZUxpc3QubGVuZ3RofWBcbiAgICAgIGNvbnNvbGUubG9nKCd0b0xhc3QnLHRvTGFzdClcbiAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICBzY3JvbGxUb3A6IDEwMDAgKiBtZXNzYWdlTGlzdC5sZW5ndGggIC8vIOi/memHjOaIkeS7rOeahOWNleWvueivneWMuuWfn+acgOmrmDEwMDDvvIzlj5bkuobmnIDlpKflgLzvvIzlupTor6XmnInmlrnms5Xlj5bliLDnsr7noa7nmoRcbiAgICAgIH0pO1xuICAgIH0pXG4gIH0sXG5cbiAgLy8g5raI5oGv5a+55pa555qE5L+h5oGvXG4gIGdldFRvVXNlckluZm8ob3BlbmlkOiBzdHJpbmcpIHtcbiAgICBBcGkuZ2V0VXNlckluZm8ob3BlbmlkKS50aGVuKChyZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBjb25zdCB1c2VySW5mbyA9IHJlc3VsdC5kYXRhO1xuICAgICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgICB0b1VzZXI6IHVzZXJJbmZvXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi6I635Y+W55So5oi35L+h5oGv5aSx6LSlXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKiDlj5HpgIHmtojmga/kuovku7YgKi9cbiAgc2VuZFRhcCgpIHtcbiAgICBzZW5kTWVzc2FnZSh7Y2lkOiB0aGlzLmRhdGEuY2lkLCBtc2c6IHRoaXMuZGF0YS5tZXNzYWdlLCB0eXBlOiAxfSk7XG4gICAgdGhpcy5zZXRDaGF0U2Vzc2lvbigpO1xuICB9LFxuXG4gIHNldENoYXRTZXNzaW9uKCkge1xuICAgIGxldCBjaGF0U2Vzc2lvbiA9IHd4LmdldFN0b3JhZ2VTeW5jKCdjaGF0U2Vzc2lvbicpO1xuICAgIGxldCBkYXRlTm93ID0gbmV3IERhdGUoKTtcbiAgICAvLyDliKTmlq3mmK/lkKbmmK/lkIzkuIDlpKlcbiAgICBpZiAoY2hhdFNlc3Npb24gJiYgY2hhdFNlc3Npb24udXBkYXRlVGltZSAmJiBuZXcgRGF0ZShjaGF0U2Vzc2lvbi51cGRhdGVUaW1lKS50b0RhdGVTdHJpbmcoKSA9PSBkYXRlTm93LnRvRGF0ZVN0cmluZygpKSB7XG4gICAgICAvLyDljrvph43lkI7lrZjlhaXogYrlpKnkurrliJfooahcbiAgICAgIGlmIChjaGF0U2Vzc2lvbi5vcGVuaWRMaXN0ICYmIGNoYXRTZXNzaW9uLm9wZW5pZExpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IGNoYXRTZXNzaW9uLm9wZW5pZExpc3QuZmluZEluZGV4KChvcGVuaWQ6IGFueSkgPT4gb3BlbmlkID09PSB0aGlzLmRhdGEub3BlbmlkKVxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYXRTZXNzaW9uLm9wZW5pZExpc3QucHVzaCh0aGlzLmRhdGEub3BlbmlkKTtcbiAgICAgICAgICBjaGF0U2Vzc2lvbiA9IHtcbiAgICAgICAgICAgIHVwZGF0ZVRpbWU6IGRhdGVOb3csXG4gICAgICAgICAgICBvcGVuaWRMaXN0OiBjaGF0U2Vzc2lvbi5vcGVuaWRMaXN0LFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjaGF0U2Vzc2lvbiA9IHtcbiAgICAgICAgdXBkYXRlVGltZTogZGF0ZU5vdyxcbiAgICAgICAgb3BlbmlkTGlzdDogW3RoaXMuZGF0YS5vcGVuaWRdXG4gICAgICB9XG4gICAgfVxuICAgIHd4LnNldFN0b3JhZ2VTeW5jKFwiY2hhdFNlc3Npb25cIiwgY2hhdFNlc3Npb24pO1xuICB9LFxuXG4gIC8qKiDovpPlhaXmtojmga/lhoXlrrkgKi9cbiAgaW5wdXRUYXAoZTogYW55KSB7XG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBtZXNzYWdlOiBlLmRldGFpbC5kZXRhaWwudmFsdWUgLy8g6I635Y+W6L6T5YWl55qE5YC8XG4gICAgfSlcbiAgfSxcblxuICAgLyoqIOi+k+WFpea2iOaBr+WGheWuuSAqL1xuICAgdXBsb2FkSW1hZ2UoZTogYW55KSB7XG4gICAgc2VuZE1lc3NhZ2Uoe2NpZDogdGhpcy5kYXRhLmNpZCwgbXNnOiBlLmRldGFpbCwgdHlwZTogMn0pXG4gIH0sXG5cbiAgZ2V0TWVzc2FnZUxpc3QocGFnZVNpemU6IG51bWJlciwgcGFnZVRva2VuOiBzdHJpbmcpIHtcbiAgICBBcGkuZ2V0TWVzc2FnZUJ5Q2lkKHRoaXMuZGF0YS5jaWQsIHBhZ2VTaXplLCBwYWdlVG9rZW4pLnRoZW4oKHJlc3VsdDphbnkpID0+IHtcbiAgICAgIGxldCByZXN1bHRMaXN0ID0gcmVzdWx0LmRhdGEucmVzdWx0O1xuICAgICAgbGV0IGxhc3RJZCA9IHJlc3VsdC5kYXRhLm5leHRQYWdlVG9rZW47XG4gICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICAgIHBhZ2VUb2tlbjogbGFzdElkLFxuICAgICAgICAgIHBhZ2VTaXplOiAxMFxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgY29uc3QgZGF0ZUFyeTogYW55W10gPSBbXTtcbiAgICAgIHJlc3VsdExpc3QgPSByZXN1bHRMaXN0LnJldmVyc2UoKTtcbiAgICAgIGxldCB7IG1lc3NhZ2VMaXN0IH0gPSB0aGlzLmRhdGE7XG4gICAgICBtZXNzYWdlTGlzdCA9IHJlc3VsdExpc3QuY29uY2F0KG1lc3NhZ2VMaXN0KTtcbiAgICAgIG1lc3NhZ2VMaXN0Lm1hcCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBnZXREYXRlKGl0ZW0uY3JlYXRlZEF0KTtcbiAgICAgICAgaWYgKGRhdGVBcnkuaW5kZXhPZihkYXRlKSA9PSAtMSkge1xuICAgICAgICAgIGl0ZW0uZGF0ZSA9IGRhdGU7XG4gICAgICAgICAgZGF0ZUFyeS5wdXNoKGRhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW0uZGF0ZSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW0udGltZSA9IGdldFRpbWUoaXRlbS5jcmVhdGVkQXQpO1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgIG1lc3NhZ2VMaXN0XG4gICAgICB9KTtcbiAgICB9KVxuICBcbiAgfSxcblxuICAvLyBvblBhZ2VTY3JvbGw6IGZ1bmN0aW9uIChyZXM6IGFueSkge1xuICAvLyAgLy8g6aG16Z2i5rua5Yqo5pe25omn6KGMXG4gIC8vICBjb25zb2xlLmxvZygnb25QYWdlU2Nyb2xsOicsIHJlcylcbiAgLy8gICBjb25zdCB7IHBhZ2luYXRpb24gfSA9IHRoaXMuZGF0YTtcbiAgLy8gICBpZiAocmVzLnNjcm9sbFRvcCA9PT0gMCAmJiBwYWdpbmF0aW9uLnBhZ2VUb2tlbiAhPT0gJycpIHtcbiAgLy8gICAgIHRoaXMuZ2V0TWVzc2FnZUxpc3QocGFnaW5hdGlvbi5wYWdlU2l6ZSwgcGFnaW5hdGlvbi5wYWdlVG9rZW4pO1xuICAvLyAgIH1cbiAgLy8gfSxcblxuICBvblJlZnJlc2g6IGZ1bmN0aW9uIChlOiBhbnkpIHtcbiAgICBjb25zb2xlLmxvZygnb25SZWZyZXNoJywgZSlcbiAgICBjb25zb2xlLmxvZygnb25SZWZyZXNoJywgZS5kZXRhaWwuc2Nyb2xsVG9wKVxuICAgIGNvbnN0IHsgcGFnaW5hdGlvbiB9ID0gdGhpcy5kYXRhO1xuICAgIGlmIChlLmRldGFpbC5zY3JvbGxUb3AgPT09IDAgJiYgcGFnaW5hdGlvbi5wYWdlVG9rZW4gIT09ICcnKSB7XG4gICAgICB0aGlzLmdldE1lc3NhZ2VMaXN0KHBhZ2luYXRpb24ucGFnZVNpemUsIHBhZ2luYXRpb24ucGFnZVRva2VuKTtcbiAgICB9XG4gIH0sXG4gIFxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliJ3mrKHmuLLmn5PlrozmiJBcbiAgICovXG4gIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouaYvuekulxuICAgKi9cbiAgb25TaG93OiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLpmpDol49cbiAgICovXG4gIG9uSGlkZTogZnVuY3Rpb24gKCkge1xuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWNuOi9vVxuICAgKi9cbiAgb25VbmxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICBDaGF0U2VydmljZS51cGRhdGVNc2dUb1JlYWRTdGF0dXModGhpcy5kYXRhLmNpZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOmhtemdouebuOWFs+S6i+S7tuWkhOeQhuWHveaVsC0t55uR5ZCs55So5oi35LiL5ouJ5Yqo5L2cXG4gICAqL1xuICBvblB1bGxEb3duUmVmcmVzaDogZnVuY3Rpb24gKCkge1xuICB9LFxuXG4gIC8qKlxuICAgKiDpobXpnaLkuIrmi4nop6blupXkuovku7bnmoTlpITnkIblh73mlbBcbiAgICovXG4gIG9uUmVhY2hCb3R0b206IGZ1bmN0aW9uICgpIHtcbiAgfSxcbn0pIl19