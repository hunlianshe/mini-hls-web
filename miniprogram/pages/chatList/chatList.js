"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Api = require("../../service/api.service");
const utils_1 = require("../../utils/utils");
const config_1 = require("../../config");
Page({
    data: {
        host: "",
        toOpenid: "",
        userList: [],
        me: {},
        matcherImage: "../../public/image/matcher.jpg",
        showDialog: false,
    },
    getChatList() {
        wx.showLoading({ title: '' });
        Api.getChatList().then((result) => {
            if (result) {
                const userList = result.data;
                userList.map((item) => {
                    item.date = utils_1.getDate(item.createdAt);
                    return item;
                });
                console.log("userList:", userList);
                this.setData({
                    userList,
                });
            }
            else {
                throw new Error("获取聊天列表失败");
            }
            wx.hideLoading();
        });
    },
    onLoad: function () {
        const user = wx.getStorageSync("user");
        console.log("user", user);
        console.log("hostUrl", config_1.default.hostUrl);
        this.setData({
            me: user,
            host: config_1.default.hostUrl,
        });
    },
    goChat(e) {
        console.log("e3wew", e.currentTarget.dataset);
        const { openids, cid } = e.currentTarget.dataset;
        console.log("openids", openids);
        this.getToUserByOpenids(openids);
        console.log("this.data.toOpenid", this.data.toOpenid);
        console.log("that.data.me.openid", this.data.me.openid);
        if (utils_1.dealFateChatIntercept(this.data.toOpenid)) {
            this.setData({
                showDialog: true,
            });
            return;
        }
        wx.navigateTo({
            url: `../chat/chat?openid=${this.data.toOpenid}&cid=${cid}`,
        });
    },
    closeDialog() {
        this.setData({
            showDialog: false,
        });
    },
    goMatchmaker() {
        wx.navigateTo({
            url: `../matchmaker/matchmaker`,
        });
    },
    getToUserByOpenids(userIds) {
        var that = this;
        userIds.forEach((userId) => {
            if (that.data.me.openid !== userId) {
                that.setData({ toOpenid: userId });
            }
        });
    },
    onReady: function () { },
    onShow: function () {
        this.getChatList();
    },
    onHide: function () { },
    onUnload: function () { },
    onPullDownRefresh: function () { },
    onReachBottom: function () { },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdExpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGF0TGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUFpRDtBQUNqRCw2Q0FBbUU7QUFDbkUseUNBQWtDO0FBRWxDLElBQUksQ0FBQztJQUNILElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxFQUFFO1FBQ1IsUUFBUSxFQUFFLEVBQUU7UUFDWixRQUFRLEVBQUUsRUFBRTtRQUNaLEVBQUUsRUFBRSxFQUFTO1FBQ2IsWUFBWSxFQUFFLGdDQUFnQztRQUM5QyxVQUFVLEVBQUUsS0FBSztLQUNsQjtJQUVELFdBQVc7UUFDVCxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQVcsRUFBRSxFQUFFO1lBQ3JDLElBQUksTUFBTSxFQUFFO2dCQUNWLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQzdCLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtvQkFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxlQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUNwQyxPQUFPLElBQUksQ0FBQztnQkFDZCxDQUFDLENBQUMsQ0FBQztnQkFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLE9BQVEsQ0FBQztvQkFDWixRQUFRO2lCQUNULENBQUMsQ0FBQzthQUNKO2lCQUFNO2dCQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDN0I7WUFDRCxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxFQUFFO1FBQ04sTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxnQkFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixFQUFFLEVBQUUsSUFBSTtZQUNSLElBQUksRUFBRSxnQkFBTSxDQUFDLE9BQU87U0FDckIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUdELE1BQU0sQ0FBQyxDQUFNO1FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QyxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO1FBQ2pELE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLDZCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDN0MsSUFBSSxDQUFDLE9BQVEsQ0FBQztnQkFDWixVQUFVLEVBQUUsSUFBSTthQUNqQixDQUFDLENBQUM7WUFDSCxPQUFPO1NBQ1I7UUFFRCxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1osR0FBRyxFQUFFLHVCQUF1QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsUUFBUSxHQUFHLEVBQUU7U0FDNUQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1osVUFBVSxFQUFFLEtBQUs7U0FDbEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUdELFlBQVk7UUFDVixFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1osR0FBRyxFQUFFLDBCQUEwQjtTQUNoQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsa0JBQWtCLENBQUMsT0FBWTtRQUM3QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQVcsRUFBRSxFQUFFO1lBQzlCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRTtnQkFDbEMsSUFBSSxDQUFDLE9BQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO2FBQ3JDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTyxFQUFFLGNBQWEsQ0FBQztJQUV2QixNQUFNLEVBQUU7UUFFTixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELE1BQU0sRUFBRSxjQUFhLENBQUM7SUFFdEIsUUFBUSxFQUFFLGNBQWEsQ0FBQztJQUV4QixpQkFBaUIsRUFBRSxjQUFhLENBQUM7SUFFakMsYUFBYSxFQUFFLGNBQWEsQ0FBQztDQUM5QixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBcGkgZnJvbSBcIi4uLy4uL3NlcnZpY2UvYXBpLnNlcnZpY2VcIjtcbmltcG9ydCB7IGdldERhdGUsIGRlYWxGYXRlQ2hhdEludGVyY2VwdCB9IGZyb20gXCIuLi8uLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IGNvbmZpZyBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XG5cblBhZ2Uoe1xuICBkYXRhOiB7XG4gICAgaG9zdDogXCJcIixcbiAgICB0b09wZW5pZDogXCJcIixcbiAgICB1c2VyTGlzdDogW10sIC8vIOeUqOaIt+WIl+ihqFxuICAgIG1lOiB7fSBhcyBhbnksIC8vIOeUqOaIt+WIl+ihqFxuICAgIG1hdGNoZXJJbWFnZTogXCIuLi8uLi9wdWJsaWMvaW1hZ2UvbWF0Y2hlci5qcGdcIixcbiAgICBzaG93RGlhbG9nOiBmYWxzZSxcbiAgfSxcblxuICBnZXRDaGF0TGlzdCgpIHtcbiAgICB3eC5zaG93TG9hZGluZyh7dGl0bGU6ICcnfSk7XG4gICAgQXBpLmdldENoYXRMaXN0KCkudGhlbigocmVzdWx0OiBhbnkpID0+IHtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgY29uc3QgdXNlckxpc3QgPSByZXN1bHQuZGF0YTtcbiAgICAgICAgdXNlckxpc3QubWFwKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgICBpdGVtLmRhdGUgPSBnZXREYXRlKGl0ZW0uY3JlYXRlZEF0KTtcbiAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwidXNlckxpc3Q6XCIsIHVzZXJMaXN0KTtcbiAgICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgdXNlckxpc3QsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi6I635Y+W6IGK5aSp5YiX6KGo5aSx6LSlXCIpO1xuICAgICAgfVxuICAgICAgd3guaGlkZUxvYWRpbmcoKTtcbiAgICB9KTtcbiAgfSxcblxuICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB1c2VyID0gd3guZ2V0U3RvcmFnZVN5bmMoXCJ1c2VyXCIpO1xuICAgIGNvbnNvbGUubG9nKFwidXNlclwiLCB1c2VyKTtcbiAgICBjb25zb2xlLmxvZyhcImhvc3RVcmxcIiwgY29uZmlnLmhvc3RVcmwpO1xuICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgbWU6IHVzZXIsXG4gICAgICBob3N0OiBjb25maWcuaG9zdFVybCxcbiAgICB9KTtcbiAgfSxcblxuICAvKiog5Y676IGK5aSpICovXG4gIGdvQ2hhdChlOiBhbnkpIHtcbiAgICBjb25zb2xlLmxvZyhcImUzd2V3XCIsIGUuY3VycmVudFRhcmdldC5kYXRhc2V0KTtcbiAgICBjb25zdCB7IG9wZW5pZHMsIGNpZCB9ID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQ7XG4gICAgY29uc29sZS5sb2coXCJvcGVuaWRzXCIsIG9wZW5pZHMpO1xuICAgIHRoaXMuZ2V0VG9Vc2VyQnlPcGVuaWRzKG9wZW5pZHMpO1xuICAgIGNvbnNvbGUubG9nKFwidGhpcy5kYXRhLnRvT3BlbmlkXCIsIHRoaXMuZGF0YS50b09wZW5pZCk7XG4gICAgY29uc29sZS5sb2coXCJ0aGF0LmRhdGEubWUub3BlbmlkXCIsIHRoaXMuZGF0YS5tZS5vcGVuaWQpO1xuXG4gICAgaWYgKGRlYWxGYXRlQ2hhdEludGVyY2VwdCh0aGlzLmRhdGEudG9PcGVuaWQpKSB7XG4gICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgc2hvd0RpYWxvZzogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHd4Lm5hdmlnYXRlVG8oe1xuICAgICAgdXJsOiBgLi4vY2hhdC9jaGF0P29wZW5pZD0ke3RoaXMuZGF0YS50b09wZW5pZH0mY2lkPSR7Y2lkfWAsXG4gICAgfSk7XG4gIH0sXG5cbiAgY2xvc2VEaWFsb2coKSB7XG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBzaG93RGlhbG9nOiBmYWxzZSxcbiAgICB9KTtcbiAgfSxcblxuICAvKiog57qi5aiYICovXG4gIGdvTWF0Y2htYWtlcigpIHtcbiAgICB3eC5uYXZpZ2F0ZVRvKHtcbiAgICAgIHVybDogYC4uL21hdGNobWFrZXIvbWF0Y2htYWtlcmAsXG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0VG9Vc2VyQnlPcGVuaWRzKHVzZXJJZHM6IGFueSkge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB1c2VySWRzLmZvckVhY2goKHVzZXJJZDogYW55KSA9PiB7XG4gICAgICBpZiAodGhhdC5kYXRhLm1lLm9wZW5pZCAhPT0gdXNlcklkKSB7XG4gICAgICAgIHRoYXQuc2V0RGF0YSEoeyB0b09wZW5pZDogdXNlcklkIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHt9LFxuXG4gIG9uU2hvdzogZnVuY3Rpb24gKCkge1xuICAgIC8v6I635Y+W6IGK5aSp5YiX6KGoXG4gICAgdGhpcy5nZXRDaGF0TGlzdCgpO1xuICB9LFxuXG4gIG9uSGlkZTogZnVuY3Rpb24gKCkge30sXG5cbiAgb25VbmxvYWQ6IGZ1bmN0aW9uICgpIHt9LFxuXG4gIG9uUHVsbERvd25SZWZyZXNoOiBmdW5jdGlvbiAoKSB7fSxcblxuICBvblJlYWNoQm90dG9tOiBmdW5jdGlvbiAoKSB7fSxcbn0pO1xuIl19