"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Api = require("../../service/api.service");
const utils_1 = require("../../utils/utils");
const config_1 = require("../../config");
Page({
    data: {
        host: '',
        toOpenid: '',
        userList: [],
        me: {},
        matcherImage: '../../public/image/matcher.png',
    },
    getChatList() {
        Api.getChatList().then((result) => {
            if (result) {
                const userList = result.data;
                userList.map((item) => {
                    item.date = utils_1.getDate(item.createdAt);
                    return item;
                });
                console.log('userList:', userList);
                this.setData({
                    userList
                });
            }
            else {
                throw new Error("获取聊天列表失败");
            }
        });
    },
    onLoad: function () {
        const user = wx.getStorageSync('user');
        console.log("user", user);
        console.log("hostUrl", config_1.default.hostUrl);
        this.setData({
            me: user,
            host: config_1.default.hostUrl,
        });
    },
    goChat(e) {
        console.log("e3wew", e.currentTarget.dataset);
        const { openids, cid } = e.currentTarget.dataset;
        console.log("openids", openids);
        this.getToUserByOpenids(openids);
        console.log("this.data.toOpenid", this.data.toOpenid);
        console.log("that.data.me.openid", this.data.me.openid);
        wx.navigateTo({
            url: `../chat/chat?openid=${this.data.toOpenid}&cid=${cid}`,
        });
    },
    goMatchmaker() {
        wx.navigateTo({
            url: `../matchmaker/matchmaker`,
        });
    },
    getToUserByOpenids(userIds) {
        var that = this;
        userIds.forEach(userId => {
            if (that.data.me.openid !== userId) {
                that.setData({ toOpenid: userId });
            }
        });
    },
    onReady: function () {
    },
    onShow: function () {
        this.getChatList();
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdExpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGF0TGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUFpRDtBQUNqRCw2Q0FBNEM7QUFDNUMseUNBQWtDO0FBRWxDLElBQUksQ0FBQztJQUNILElBQUksRUFBRTtRQUNKLElBQUksRUFBQyxFQUFFO1FBQ1AsUUFBUSxFQUFDLEVBQUU7UUFDWCxRQUFRLEVBQUUsRUFBRTtRQUNaLEVBQUUsRUFBRSxFQUFFO1FBQ04sWUFBWSxFQUFFLGdDQUFnQztLQUMvQztJQUdELFdBQVc7UUFDVCxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBVyxFQUFFLEVBQUU7WUFDckMsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDN0IsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO29CQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLGVBQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQ3BDLE9BQU8sSUFBSSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2dCQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFBO2dCQUNsQyxJQUFJLENBQUMsT0FBUSxDQUFDO29CQUNaLFFBQVE7aUJBQ1QsQ0FBQyxDQUFDO2FBQ0o7aUJBQU07Z0JBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUM3QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sRUFBRTtRQUNOLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLENBQUE7UUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUMsZ0JBQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNyQyxJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1osRUFBRSxFQUFFLElBQUk7WUFDUixJQUFJLEVBQUUsZ0JBQU0sQ0FBQyxPQUFPO1NBQ3JCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFHRCxNQUFNLENBQUMsQ0FBTTtRQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDNUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztRQUNqRCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBQyxPQUFPLENBQUMsQ0FBQTtRQUM5QixJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3BELE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDdEQsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBRSx1QkFBdUIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLFFBQVEsR0FBRyxFQUFFO1NBQzVELENBQUMsQ0FBQTtJQUNKLENBQUM7SUFHRCxZQUFZO1FBQ1YsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBRSwwQkFBMEI7U0FDaEMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELGtCQUFrQixDQUFDLE9BQU87UUFDeEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDdkIsSUFBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEtBQUssTUFBTSxFQUFDO2dCQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUMsUUFBUSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUE7YUFDakM7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUVKLENBQUM7SUFFRCxPQUFPLEVBQUU7SUFDVCxDQUFDO0lBRUQsTUFBTSxFQUFFO1FBRU4sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxNQUFNLEVBQUU7SUFDUixDQUFDO0lBRUQsUUFBUSxFQUFFO0lBQ1YsQ0FBQztJQUVELGlCQUFpQixFQUFFO0lBQ25CLENBQUM7SUFFRCxhQUFhLEVBQUU7SUFDZixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQXBpIGZyb20gJy4uLy4uL3NlcnZpY2UvYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgZ2V0RGF0ZSB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBjb25maWcgZnJvbSAnLi4vLi4vY29uZmlnJztcblxuUGFnZSh7XG4gIGRhdGE6IHtcbiAgICBob3N0OicnLFxuICAgIHRvT3BlbmlkOicnLFxuICAgIHVzZXJMaXN0OiBbXSwgLy8g55So5oi35YiX6KGoXG4gICAgbWU6IHt9LCAvLyDnlKjmiLfliJfooahcbiAgICBtYXRjaGVySW1hZ2U6ICcuLi8uLi9wdWJsaWMvaW1hZ2UvbWF0Y2hlci5wbmcnLFxuICB9LFxuXG5cbiAgZ2V0Q2hhdExpc3QoKSB7XG4gICAgQXBpLmdldENoYXRMaXN0KCkudGhlbigocmVzdWx0OiBhbnkpID0+IHtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgY29uc3QgdXNlckxpc3QgPSByZXN1bHQuZGF0YTtcbiAgICAgICAgdXNlckxpc3QubWFwKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgICBpdGVtLmRhdGUgPSBnZXREYXRlKGl0ZW0uY3JlYXRlZEF0KTtcbiAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd1c2VyTGlzdDonLCB1c2VyTGlzdClcbiAgICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgdXNlckxpc3RcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLojrflj5bogYrlpKnliJfooajlpLHotKVcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdXNlciA9IHd4LmdldFN0b3JhZ2VTeW5jKCd1c2VyJyk7XG4gICAgY29uc29sZS5sb2coXCJ1c2VyXCIsdXNlcilcbiAgICBjb25zb2xlLmxvZyhcImhvc3RVcmxcIixjb25maWcuaG9zdFVybClcbiAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgIG1lOiB1c2VyLFxuICAgICAgaG9zdDogY29uZmlnLmhvc3RVcmwsXG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqIOWOu+iBiuWkqSAqL1xuICBnb0NoYXQoZTogYW55KSB7XG4gICAgY29uc29sZS5sb2coXCJlM3dld1wiLGUuY3VycmVudFRhcmdldC5kYXRhc2V0KVxuICAgIGNvbnN0IHsgb3BlbmlkcywgY2lkIH0gPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldDtcbiAgICBjb25zb2xlLmxvZyhcIm9wZW5pZHNcIixvcGVuaWRzKVxuICAgIHRoaXMuZ2V0VG9Vc2VyQnlPcGVuaWRzKG9wZW5pZHMpXG4gICAgY29uc29sZS5sb2coXCJ0aGlzLmRhdGEudG9PcGVuaWRcIix0aGlzLmRhdGEudG9PcGVuaWQpXG4gICAgY29uc29sZS5sb2coXCJ0aGF0LmRhdGEubWUub3BlbmlkXCIsdGhpcy5kYXRhLm1lLm9wZW5pZClcbiAgICB3eC5uYXZpZ2F0ZVRvKHtcbiAgICAgIHVybDogYC4uL2NoYXQvY2hhdD9vcGVuaWQ9JHt0aGlzLmRhdGEudG9PcGVuaWR9JmNpZD0ke2NpZH1gLFxuICAgIH0pXG4gIH0sXG5cbiAgLyoqIOe6ouWomCAqL1xuICBnb01hdGNobWFrZXIoKSB7XG4gICAgd3gubmF2aWdhdGVUbyh7XG4gICAgICB1cmw6IGAuLi9tYXRjaG1ha2VyL21hdGNobWFrZXJgLFxuICAgIH0pXG4gIH0sXG5cbiAgZ2V0VG9Vc2VyQnlPcGVuaWRzKHVzZXJJZHMpe1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB1c2VySWRzLmZvckVhY2godXNlcklkID0+IHtcbiAgICAgIGlmKHRoYXQuZGF0YS5tZS5vcGVuaWQgIT09IHVzZXJJZCl7XG4gICAgICAgIHRoYXQuc2V0RGF0YSh7dG9PcGVuaWQ6IHVzZXJJZH0pXG4gICAgICB9XG4gICAgfSlcblxuICB9LFxuXG4gIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgfSxcblxuICBvblNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICAvL+iOt+WPluiBiuWkqeWIl+ihqFxuICAgIHRoaXMuZ2V0Q2hhdExpc3QoKTtcbiAgfSxcblxuICBvbkhpZGU6IGZ1bmN0aW9uICgpIHtcbiAgfSxcblxuICBvblVubG9hZDogZnVuY3Rpb24gKCkge1xuICB9LFxuXG4gIG9uUHVsbERvd25SZWZyZXNoOiBmdW5jdGlvbiAoKSB7XG4gIH0sXG5cbiAgb25SZWFjaEJvdHRvbTogZnVuY3Rpb24gKCkge1xuICB9LFxufSkiXX0=