"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const oss_1 = require("../../utils/oss");
const config_1 = require("../../config");
let user;
const Api = require("../../service/api.service");
Page({
    data: {
        user: { openid: '' },
        carId: '',
        shopId: '',
        brand: '',
        brandDetail: '',
        price: '',
        dateCard: '',
        kilometer: '',
        transfersNumber: '',
        statusValue: '在售',
        status: 1,
        introduce: '',
        note: '',
        leftLenth: 300,
        indexImage: '',
        uploadIndexPath: '',
        oldImages: [],
        uploadImgs: [],
        count: 9,
        city: '',
        selectValue: '',
        cityList: [],
        hotCityList: [],
        popHidden: true,
        brandList: [],
        hotBrandList: [],
        dateNow: '',
        popHiddenBrand: true,
        submitDisable: false,
        statusArray: [
            { code: 0, value: '已出售' },
            { code: 1, value: '在售' }
        ],
        introArray: [
            'A、优秀（车况好，没有任何事故）',
            'B、良好（有少量剐蹭或钣金）',
            'C、一般（有过前后轻碰撞事故）',
            'D、较差（有发生过伤及主体框架的碰撞或较重事故）'
        ]
    },
    onLoad: function () {
        let self = this;
        wx.getStorage({
            key: 'user',
            success: function (res) {
                console.log('res', res);
                Api.getUserInfo(res.data.openid).then((result) => {
                    console.log('1212', result);
                    if (result) {
                        user = result.data;
                        console.log(' result', result.data.photos);
                        self.setData({
                            oldImages: result.data.photos,
                        });
                    }
                });
            }
        });
    },
    getYMD(dateStr) {
        const date = new Date(dateStr);
        const year = date.getFullYear();
        let month = date.getMonth() + 1;
        month = month <= 9 ? `0${month}` : month;
        let day = date.getDate();
        day = day <= 9 ? `0${day}` : day;
        return `${year}-${month}-${day}`;
    },
    onSubmit() {
        let that = this;
        const openid = this.data.user.openid;
        const aliyunServerURL = config_1.default.uploadImageUrl;
        let indexImage = this.data.indexImage;
        let uploadIndexPath = this.data.uploadIndexPath;
        if (uploadIndexPath !== '') {
            console.log('are you ok...');
            oss_1.default({
                filePath: indexImage,
                dir: `images/shop/${openid}/` + indexImage.replace('http://tmp/', ''),
                success: function (res) {
                    console.log('indexImage', indexImage);
                    indexImage = `${aliyunServerURL}/${res}`;
                    that.uploadAndSubmit();
                },
                fail: function () {
                    that.uploadAndSubmit();
                }
            });
        }
        else {
            that.uploadAndSubmit();
        }
    },
    uploadAndSubmit() {
        const openid = this.data.user.openid;
        const aliyunServerURL = config_1.default.uploadImageUrl;
        let that = this;
        let count = 0;
        let images = [];
        let uploadImgs = this.data.uploadImgs;
        wx.showLoading({
            title: '',
        });
        if (uploadImgs.length > 0) {
            for (let i = 0; i < uploadImgs.length; i++) {
                let filePath = uploadImgs[i];
                oss_1.default({
                    filePath: filePath,
                    dir: `images/shop/${openid}/` + filePath.replace('http://tmp/', ''),
                    success: function (res) {
                        count++;
                        images.push(`${aliyunServerURL}/${res}`);
                        console.log("images", images);
                        wx.hideLoading();
                        if (count === uploadImgs.length) {
                            images = images.concat(that.data.oldImages);
                            that.updateUserImage(images);
                        }
                        else {
                            wx.hideLoading();
                        }
                    },
                    fail: function () {
                        wx.hideLoading();
                    }
                });
            }
        }
        else {
            images = images.concat(that.data.oldImages);
            that.updateUserImage(images);
            wx.hideLoading();
        }
    },
    updateUserImage(images) {
        console.log('images', images);
        Api.updateUser({ openid: user.openid, photos: images }).then((result) => {
            console.log("result", result);
            wx.showToast({
                title: '保存成功',
                icon: 'success',
                duration: 1000,
                mask: true
            });
        });
    },
    delImage(e) {
        const array = e.currentTarget.dataset.array;
        const index = e.currentTarget.dataset.index;
        if (array === 'oldImages') {
            const oldImages = this.data.oldImages;
            oldImages.splice(index, 1);
            this.setData({
                oldImages
            });
        }
        else {
            const uploadImgs = this.data.uploadImgs;
            uploadImgs.splice(index, 1);
            this.setData({
                uploadImgs
            });
        }
    },
    chooseIndexImage() {
        this.chooseImage(1, 'one');
    },
    chooseOtherImage(e) {
        const selectPictureNum = e.target.dataset.num;
        let count = 99 - selectPictureNum;
        this.chooseImage(count, 'multi');
    },
    chooseImage(count, type) {
        const that = this;
        wx.chooseImage({
            count: count,
            sizeType: ['original', 'compressed'],
            sourceType: ['album', 'camera'],
            success: function (res) {
                let uploadImgs = that.data.uploadImgs;
                if (type === 'multi') {
                    that.setData({
                        uploadImgs: uploadImgs.concat(res.tempFilePaths),
                    });
                }
                else {
                    that.setData({
                        uploadIndexPath: res.tempFilePaths[0],
                        indexImage: res.tempFilePaths[0],
                    });
                }
            },
        });
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
});
//# sourceMappingURL=data:application/json;base64,