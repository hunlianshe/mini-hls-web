"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Api = require("../../service/api.service");
const utils_1 = require("../../utils/utils");
Page({
    data: {
        openid: "",
        userInfo: {},
        showDialog: false,
    },
    onLoad: function (options) {
        this.setData({
            openid: options.openid,
        });
        this.getUserInfo(options.openid);
    },
    getUserInfo(openid) {
        Api.getUserInfo(openid).then((result) => {
            if (result.code == 200) {
                const userInfo = result.data;
                userInfo.intro = [];
                if (userInfo.age) {
                    userInfo.intro.push(userInfo.age);
                }
                if (userInfo.jobGeneral) {
                    userInfo.intro.push(userInfo.jobGeneral);
                }
                if (userInfo.jobDetail) {
                    userInfo.intro.push(userInfo.jobDetail);
                }
                if (userInfo.education) {
                    userInfo.intro.push(userInfo.education);
                }
                userInfo.intro = userInfo.intro.join(" | ");
                this.setData({
                    userInfo,
                });
            }
        });
    },
    putUsersLike() {
        const { openid } = this.data;
        Api.putUsersLike(openid).then((result) => {
            if (result.code == 200) {
                wx.showToast({
                    title: "收藏成功",
                    icon: "success",
                });
            }
        });
    },
    goChat() {
        if (utils_1.dealFateChatIntercept(this.data.openid)) {
            this.setData({
                showDialog: true,
            });
            return;
        }
        Api.startChatSession({
            userIds: [this.data.openid],
        }).then((result) => {
            if (result.code == 200) {
                console.log(`start chat session result`, result.data);
                wx.navigateTo({
                    url: `../chat/chat?openid=${this.data.openid}&cid=${result.data._id}`,
                });
            }
        });
    },
    closeDialog: function () {
        this.setData({
            showDialog: false
        });
    },
    onReady: function () { },
    onShow: function () { },
    onHide: function () { },
    onUnload: function () { },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlckRldGFpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVzZXJEZXRhaWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBaUQ7QUFDakQsNkNBQTBEO0FBRTFELElBQUksQ0FBQztJQUNILElBQUksRUFBRTtRQUNKLE1BQU0sRUFBRSxFQUFFO1FBQ1YsUUFBUSxFQUFFLEVBQVM7UUFDbkIsVUFBVSxFQUFFLEtBQUs7S0FDbEI7SUFFRCxNQUFNLEVBQUUsVUFBVSxPQUFZO1FBQzVCLElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07U0FDdkIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUdELFdBQVcsQ0FBQyxNQUFjO1FBQ3hCLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBVyxFQUFFLEVBQUU7WUFDM0MsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLEdBQUcsRUFBRTtnQkFDdEIsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDN0IsUUFBUSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7Z0JBQ3BCLElBQUksUUFBUSxDQUFDLEdBQUcsRUFBRTtvQkFDaEIsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNuQztnQkFDRCxJQUFJLFFBQVEsQ0FBQyxVQUFVLEVBQUU7b0JBQ3ZCLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDMUM7Z0JBQ0QsSUFBSSxRQUFRLENBQUMsU0FBUyxFQUFFO29CQUN0QixRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQ3pDO2dCQUNELElBQUksUUFBUSxDQUFDLFNBQVMsRUFBRTtvQkFDdEIsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUN6QztnQkFDRCxRQUFRLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM1QyxJQUFJLENBQUMsT0FBUSxDQUFDO29CQUNaLFFBQVE7aUJBQ1QsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFHRCxZQUFZO1FBQ1YsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDN0IsR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFXLEVBQUUsRUFBRTtZQUM1QyxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFFO2dCQUN0QixFQUFFLENBQUMsU0FBUyxDQUFDO29CQUNYLEtBQUssRUFBRSxNQUFNO29CQUNiLElBQUksRUFBRSxTQUFTO2lCQUNoQixDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUdELE1BQU07UUFDSixJQUFJLDZCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDM0MsSUFBSSxDQUFDLE9BQVEsQ0FBQztnQkFDWixVQUFVLEVBQUUsSUFBSTthQUNqQixDQUFDLENBQUM7WUFDSCxPQUFPO1NBQ1I7UUFFRCxHQUFHLENBQUMsZ0JBQWdCLENBQUM7WUFDbkIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDNUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQVcsRUFBRSxFQUFFO1lBQ3RCLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxHQUFHLEVBQUU7Z0JBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN0RCxFQUFFLENBQUMsVUFBVSxDQUFDO29CQUNaLEdBQUcsRUFBRSx1QkFBdUIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLFFBQVEsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7aUJBQ3RFLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVyxFQUFFO1FBQ1gsSUFBSSxDQUFDLE9BQVEsQ0FBQztZQUNaLFVBQVUsRUFBRSxLQUFLO1NBQ2xCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxPQUFPLEVBQUUsY0FBYSxDQUFDO0lBRXZCLE1BQU0sRUFBRSxjQUFhLENBQUM7SUFLdEIsTUFBTSxFQUFFLGNBQWEsQ0FBQztJQUt0QixRQUFRLEVBQUUsY0FBYSxDQUFDO0NBQ3pCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFwaSBmcm9tICcuLi8uLi9zZXJ2aWNlL2FwaS5zZXJ2aWNlJzsgXG5pbXBvcnQgeyBkZWFsRmF0ZUNoYXRJbnRlcmNlcHQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvdXRpbHNcIjtcblxuUGFnZSh7XG4gIGRhdGE6IHtcbiAgICBvcGVuaWQ6IFwiXCIsXG4gICAgdXNlckluZm86IHt9IGFzIGFueSxcbiAgICBzaG93RGlhbG9nOiBmYWxzZSxcbiAgfSxcblxuICBvbkxvYWQ6IGZ1bmN0aW9uIChvcHRpb25zOiBhbnkpIHtcbiAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgIG9wZW5pZDogb3B0aW9ucy5vcGVuaWQsXG4gICAgfSk7XG4gICAgdGhpcy5nZXRVc2VySW5mbyhvcHRpb25zLm9wZW5pZCk7XG4gIH0sXG5cbiAgLyoqIOiOt+WPlueUqOaIt+S/oeaBryAqL1xuICBnZXRVc2VySW5mbyhvcGVuaWQ6IHN0cmluZykge1xuICAgIEFwaS5nZXRVc2VySW5mbyhvcGVuaWQpLnRoZW4oKHJlc3VsdDogYW55KSA9PiB7XG4gICAgICBpZiAocmVzdWx0LmNvZGUgPT0gMjAwKSB7XG4gICAgICAgIGNvbnN0IHVzZXJJbmZvID0gcmVzdWx0LmRhdGE7XG4gICAgICAgIHVzZXJJbmZvLmludHJvID0gW107XG4gICAgICAgIGlmICh1c2VySW5mby5hZ2UpIHtcbiAgICAgICAgICB1c2VySW5mby5pbnRyby5wdXNoKHVzZXJJbmZvLmFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVzZXJJbmZvLmpvYkdlbmVyYWwpIHtcbiAgICAgICAgICB1c2VySW5mby5pbnRyby5wdXNoKHVzZXJJbmZvLmpvYkdlbmVyYWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1c2VySW5mby5qb2JEZXRhaWwpIHtcbiAgICAgICAgICB1c2VySW5mby5pbnRyby5wdXNoKHVzZXJJbmZvLmpvYkRldGFpbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVzZXJJbmZvLmVkdWNhdGlvbikge1xuICAgICAgICAgIHVzZXJJbmZvLmludHJvLnB1c2godXNlckluZm8uZWR1Y2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB1c2VySW5mby5pbnRybyA9IHVzZXJJbmZvLmludHJvLmpvaW4oXCIgfCBcIik7XG4gICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgIHVzZXJJbmZvLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICAvKiog5YWz5rOoKOaUtuiXjynmjqXlj6MgKi9cbiAgcHV0VXNlcnNMaWtlKCkge1xuICAgIGNvbnN0IHsgb3BlbmlkIH0gPSB0aGlzLmRhdGE7XG4gICAgQXBpLnB1dFVzZXJzTGlrZShvcGVuaWQpLnRoZW4oKHJlc3VsdDogYW55KSA9PiB7XG4gICAgICBpZiAocmVzdWx0LmNvZGUgPT0gMjAwKSB7XG4gICAgICAgIHd4LnNob3dUb2FzdCh7XG4gICAgICAgICAgdGl0bGU6IFwi5pS26JeP5oiQ5YqfXCIsXG4gICAgICAgICAgaWNvbjogXCJzdWNjZXNzXCIsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKiDljrvogYrlpKkgKi9cbiAgZ29DaGF0KCkge1xuICAgIGlmIChkZWFsRmF0ZUNoYXRJbnRlcmNlcHQodGhpcy5kYXRhLm9wZW5pZCkpIHtcbiAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICBzaG93RGlhbG9nOiB0cnVlLFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIOW8gOWni+WbnuivnVxuICAgIEFwaS5zdGFydENoYXRTZXNzaW9uKHtcbiAgICAgIHVzZXJJZHM6IFt0aGlzLmRhdGEub3BlbmlkXSxcbiAgICB9KS50aGVuKChyZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5jb2RlID09IDIwMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhgc3RhcnQgY2hhdCBzZXNzaW9uIHJlc3VsdGAsIHJlc3VsdC5kYXRhKTtcbiAgICAgICAgd3gubmF2aWdhdGVUbyh7XG4gICAgICAgICAgdXJsOiBgLi4vY2hhdC9jaGF0P29wZW5pZD0ke3RoaXMuZGF0YS5vcGVuaWR9JmNpZD0ke3Jlc3VsdC5kYXRhLl9pZH1gLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBjbG9zZURpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBzaG93RGlhbG9nOiBmYWxzZVxuICAgIH0pXG4gIH0sXG5cbiAgb25SZWFkeTogZnVuY3Rpb24gKCkge30sXG5cbiAgb25TaG93OiBmdW5jdGlvbiAoKSB7fSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLpmpDol49cbiAgICovXG4gIG9uSGlkZTogZnVuY3Rpb24gKCkge30sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Y246L29XG4gICAqL1xuICBvblVubG9hZDogZnVuY3Rpb24gKCkge30sXG59KTsiXX0=