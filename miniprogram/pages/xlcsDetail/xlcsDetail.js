"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Api = require("../../service/api.service");
Page({
    data: {
        question: {},
        questionIndex: 0,
        questionList: [],
        answerList: [],
        psyTest: [],
    },
    onLoad: function (options) {
        this.getPsyTest(options.id);
    },
    select(e) {
        const { option, index } = e.currentTarget.dataset;
        const { questionIndex, questionList, answerList, } = this.data;
        console.log(questionList[questionIndex]);
        console.log(questionList[questionIndex].answerOptions[index]);
        questionList[questionIndex].answerOptions[index].isSelect = true;
        answerList.push(option);
        console.log(answerList);
        if ((questionIndex + 1) === questionList.length) {
            wx.navigateTo({
                url: '../xlcsResult/xlcsResult',
            });
        }
        else {
            this.setData({
                questionIndex: questionIndex + 1,
                questionList,
                question: questionList[questionIndex + 1],
                answerList,
            });
        }
    },
    getPsyTest(id) {
        Api.getPsyTest(id).then((result) => {
            this.setData({
                psyTest: result.data,
                questionList: result.data.content,
            });
            let question = this.data.questionList[this.data.questionIndex];
            this.setData({
                question,
            });
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGxjc0RldGFpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInhsY3NEZXRhaWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBaUQ7QUFFakQsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osUUFBUSxFQUFFLEVBQUU7UUFDWixhQUFhLEVBQUUsQ0FBQztRQUNoQixZQUFZLEVBQUUsRUFBVztRQUN6QixVQUFVLEVBQUUsRUFBYztRQUMxQixPQUFPLEVBQUUsRUFBRTtLQUNaO0lBRUQsTUFBTSxFQUFFLFVBQVUsT0FBWTtRQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsTUFBTSxDQUFDLENBQU07UUFDWCxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO1FBQ2xELE1BQU0sRUFDSixhQUFhLEVBQ2IsWUFBWSxFQUNaLFVBQVUsR0FDWCxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzlELFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNqRSxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUMsS0FBSyxZQUFZLENBQUMsTUFBTSxFQUFFO1lBQy9DLEVBQUUsQ0FBQyxVQUFVLENBQUM7Z0JBQ1osR0FBRyxFQUFFLDBCQUEwQjthQUNoQyxDQUFDLENBQUE7U0FDSDthQUFNO1lBQ0wsSUFBSSxDQUFDLE9BQVEsQ0FBQztnQkFDWixhQUFhLEVBQUUsYUFBYSxHQUFHLENBQUM7Z0JBQ2hDLFlBQVk7Z0JBQ1osUUFBUSxFQUFFLFlBQVksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QyxVQUFVO2FBQ1gsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBR0QsVUFBVSxDQUFDLEVBQVU7UUFDbkIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFXLEVBQUUsRUFBRTtZQUN0QyxJQUFJLENBQUMsT0FBUSxDQUFDO2dCQUNaLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSTtnQkFDcEIsWUFBWSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTzthQUNsQyxDQUFDLENBQUM7WUFDSCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQy9ELElBQUksQ0FBQyxPQUFRLENBQUM7Z0JBQ1osUUFBUTthQUNULENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFwaSBmcm9tICcuLi8uLi9zZXJ2aWNlL2FwaS5zZXJ2aWNlJztcblxuUGFnZSh7XG4gIGRhdGE6IHtcbiAgICBxdWVzdGlvbjoge30sXG4gICAgcXVlc3Rpb25JbmRleDogMCxcbiAgICBxdWVzdGlvbkxpc3Q6IFtdIGFzIGFueVtdLFxuICAgIGFuc3dlckxpc3Q6IFtdIGFzIHN0cmluZ1tdLFxuICAgIHBzeVRlc3Q6IFtdLFxuICB9LFxuXG4gIG9uTG9hZDogZnVuY3Rpb24gKG9wdGlvbnM6IGFueSkge1xuICAgIHRoaXMuZ2V0UHN5VGVzdChvcHRpb25zLmlkKTtcbiAgfSxcblxuICBzZWxlY3QoZTogYW55KSB7XG4gICAgY29uc3QgeyBvcHRpb24sIGluZGV4IH0gPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldDtcbiAgICBjb25zdCB7XG4gICAgICBxdWVzdGlvbkluZGV4LFxuICAgICAgcXVlc3Rpb25MaXN0LFxuICAgICAgYW5zd2VyTGlzdCxcbiAgICB9ID0gdGhpcy5kYXRhO1xuICAgIGNvbnNvbGUubG9nKHF1ZXN0aW9uTGlzdFtxdWVzdGlvbkluZGV4XSk7XG4gICAgY29uc29sZS5sb2cocXVlc3Rpb25MaXN0W3F1ZXN0aW9uSW5kZXhdLmFuc3dlck9wdGlvbnNbaW5kZXhdKTtcbiAgICBxdWVzdGlvbkxpc3RbcXVlc3Rpb25JbmRleF0uYW5zd2VyT3B0aW9uc1tpbmRleF0uaXNTZWxlY3QgPSB0cnVlO1xuICAgIGFuc3dlckxpc3QucHVzaChvcHRpb24pO1xuICAgIGNvbnNvbGUubG9nKGFuc3dlckxpc3QpO1xuICAgIGlmICgocXVlc3Rpb25JbmRleCArIDEpID09PSBxdWVzdGlvbkxpc3QubGVuZ3RoKSB7IC8vIGxhc3QgcXVlc3Rpb25cbiAgICAgIHd4Lm5hdmlnYXRlVG8oe1xuICAgICAgICB1cmw6ICcuLi94bGNzUmVzdWx0L3hsY3NSZXN1bHQnLFxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgIHF1ZXN0aW9uSW5kZXg6IHF1ZXN0aW9uSW5kZXggKyAxLFxuICAgICAgICBxdWVzdGlvbkxpc3QsXG4gICAgICAgIHF1ZXN0aW9uOiBxdWVzdGlvbkxpc3RbcXVlc3Rpb25JbmRleCArIDFdLFxuICAgICAgICBhbnN3ZXJMaXN0LFxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKiDojrflj5blv4PnkIbmtYvor5Xpopjnm64gKi9cbiAgZ2V0UHN5VGVzdChpZDogc3RyaW5nKSB7XG4gICAgQXBpLmdldFBzeVRlc3QoaWQpLnRoZW4oKHJlc3VsdDogYW55KSA9PiB7XG4gICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgcHN5VGVzdDogcmVzdWx0LmRhdGEsXG4gICAgICAgIHF1ZXN0aW9uTGlzdDogcmVzdWx0LmRhdGEuY29udGVudCxcbiAgICAgIH0pO1xuICAgICAgbGV0IHF1ZXN0aW9uID0gdGhpcy5kYXRhLnF1ZXN0aW9uTGlzdFt0aGlzLmRhdGEucXVlc3Rpb25JbmRleF07XG4gICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgcXVlc3Rpb24sXG4gICAgICB9KTtcbiAgICB9KVxuICB9LFxufSkiXX0=