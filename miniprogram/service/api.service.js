"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const httpServer_1 = require("./httpServer");
const getOpenid = (code) => httpServer_1.default.get({ url: `/users/openidfromwx/${code}` });
exports.getOpenid = getOpenid;
const register = (user) => httpServer_1.default.post({ url: "/users/register", data: user });
exports.register = register;
const getUserInfo = (openid) => httpServer_1.default.get({ url: `/users/getUserInfo/${openid}` });
exports.getUserInfo = getUserInfo;
const updateUser = (user) => httpServer_1.default.post({ url: `/users/updateUserInfo`, data: user });
exports.updateUser = updateUser;
const addPhone = (data) => httpServer_1.default.post({ url: `/users/addPhone`, data });
exports.addPhone = addPhone;
const sendSms = (data) => httpServer_1.default.post({ url: `/users/sendSms`, data });
exports.sendSms = sendSms;
const putUsersLike = (openid) => httpServer_1.default.put({ url: `/users/like/${openid}` });
exports.putUsersLike = putUsersLike;
const getUsersLikeCount = () => httpServer_1.default.get({ url: `/users/like/count` });
exports.getUsersLikeCount = getUsersLikeCount;
const getUsersListLikes = (data) => httpServer_1.default.post({ url: `/users/listLikes`, data });
exports.getUsersListLikes = getUsersListLikes;
const getUserList = (data) => httpServer_1.default.post({ url: `/users/listUsers`, data });
exports.getUserList = getUserList;
const getPsyList = () => httpServer_1.default.get({ url: `/psychological-test/plist` });
exports.getPsyList = getPsyList;
const getPsyTest = (id) => httpServer_1.default.get({ url: `/psychological-test/${id}` });
exports.getPsyTest = getPsyTest;
const getFortune = (fortuneName) => httpServer_1.default.get({ url: `/fortune/${fortuneName}` });
exports.getFortune = getFortune;
const getHoroscopet = (consName, type = "today") => httpServer_1.default.get({
    url: `/fortune/horoscope/realtime?consName=${consName}&type=${type}`,
});
exports.getHoroscopet = getHoroscopet;
const getConstellationStory = (consName) => httpServer_1.default.get({ url: `/constellation-story/listStory/${consName}` });
exports.getConstellationStory = getConstellationStory;
const getConstellationMmatchingDetail = (me, he) => httpServer_1.default.get({
    url: `/fortune/constellationMmatching/detail?me=${me}&he=${he}`,
});
exports.getConstellationMmatchingDetail = getConstellationMmatchingDetail;
const getConstellationMmatchingDetailComplex = () => httpServer_1.default.get({ url: `/fortune/constellationMmatching/detail-complex` });
exports.getConstellationMmatchingDetailComplex = getConstellationMmatchingDetailComplex;
const getGenerateCatOrDogResult = (data) => httpServer_1.default.post({ url: `/psychological-test/generateCatOrDogResult`, data });
exports.getGenerateCatOrDogResult = getGenerateCatOrDogResult;
const getPastLove = () => httpServer_1.default.get({ url: `/psychological-test/getPastLove` });
exports.getPastLove = getPastLove;
const getAccessToken = () => httpServer_1.default.get({ url: "/mini/getAccessToken" });
exports.getAccessToken = getAccessToken;
const getUserDetail = (id) => httpServer_1.default.get({ url: `/user/getUserInfo?id=${id}` });
exports.getUserDetail = getUserDetail;
const createShop = (params) => httpServer_1.default.post({ url: `/shop/createShop`, data: params });
exports.createShop = createShop;
const updateShop = (params) => httpServer_1.default.post({ url: `/shop/updateShop`, data: params });
exports.updateShop = updateShop;
const getChatList = () => httpServer_1.default.get({ url: `/group/list` });
exports.getChatList = getChatList;
const startChatSession = (params) => httpServer_1.default.post({ url: `/group/create`, data: params });
exports.startChatSession = startChatSession;
const getChatMessageList = (sessionId, pageSize, prePage) => httpServer_1.default.get({
    url: `/group/message/list/${sessionId}?pageSize=${pageSize || 1}&pageToken=${prePage || ""}`,
});
exports.getChatMessageList = getChatMessageList;
const vipListInfo = () => httpServer_1.default.get({ url: `/orderPay/vipInfo` });
exports.vipListInfo = vipListInfo;
const rechargeMoney = (params) => httpServer_1.default.post({ url: `/orderPay/recharge`, data: params });
exports.rechargeMoney = rechargeMoney;
const buyVipByCoin = (params) => httpServer_1.default.post({ url: `/orderPay/buyVipByCoin`, data: params });
exports.buyVipByCoin = buyVipByCoin;
const buyVipByWechat = (params) => httpServer_1.default.post({ url: `/orderPay/buyVipByWechat`, data: params });
exports.buyVipByWechat = buyVipByWechat;
const checkOrderStatus = (orderNum) => httpServer_1.default.get({ url: `/orderPay/checkOrderStatus/${orderNum}` });
exports.checkOrderStatus = checkOrderStatus;
const getMessageByCid = (cid, pageSize, pageToken) => httpServer_1.default.get({
    url: `/group/message/list/${cid}?pageSize=${pageSize}&pageToken=${pageToken}`,
});
exports.getMessageByCid = getMessageByCid;
const getVipInfo = () => httpServer_1.default.get({ url: `/users/vip/info` });
exports.getVipInfo = getVipInfo;
const getRightConfig = () => httpServer_1.default.get({ url: `/users/vip/info` });
exports.getRightConfig = getRightConfig;
//# sourceMappingURL=data:application/json;base64,