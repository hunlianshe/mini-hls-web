"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const httpServer_1 = require("./httpServer");
const getOpenid = (code) => httpServer_1.default.get({ url: `/users/openidfromwx/${code}` });
exports.getOpenid = getOpenid;
const insertUser = (user) => httpServer_1.default.post({ url: '/user/insertUser', data: user });
exports.insertUser = insertUser;
const getFortune = (fortuneName) => httpServer_1.default.get({ url: `/fortune/${fortuneName}` });
exports.getFortune = getFortune;
const getPsyTest = () => httpServer_1.default.get({ url: `/psychological-test/getPsyTest` });
exports.getPsyTest = getPsyTest;
const getAccessToken = () => httpServer_1.default.get({ url: '/mini/getAccessToken' });
exports.getAccessToken = getAccessToken;
const updateUser = (params) => httpServer_1.default.post({ url: `/user/updateUser`, data: params });
exports.updateUser = updateUser;
const register = (user) => httpServer_1.default.post({ url: '/user/insertUser', data: user });
exports.register = register;
const getUserInfo = () => httpServer_1.default.get({ url: `/user/userInfo` });
exports.getUserInfo = getUserInfo;
const getUserDetail = (id) => httpServer_1.default.get({ url: `/user/userInfo?id=${id}` });
exports.getUserDetail = getUserDetail;
const getCityList = (params) => httpServer_1.default.post({ url: `/user/district`, data: params });
exports.getCityList = getCityList;
const getAllDistrict = (params) => httpServer_1.default.post({ url: `/user/allDistrict`, data: params });
exports.getAllDistrict = getAllDistrict;
const createShop = (params) => httpServer_1.default.post({ url: `/shop/createShop`, data: params });
exports.createShop = createShop;
const updateShop = (params) => httpServer_1.default.post({ url: `/shop/updateShop`, data: params });
exports.updateShop = updateShop;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLDZDQUFzQztBQVF0QyxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFLENBQUMsb0JBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsdUJBQXVCLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQXVFekYsOEJBQVM7QUEvRFgsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFVLEVBQUUsRUFBRSxDQUFDLG9CQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBZ0UxRixnQ0FBVTtBQTNEWixNQUFNLFVBQVUsR0FBRyxDQUFDLFdBQW1CLEVBQUUsRUFBRSxDQUFDLG9CQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLFlBQVksV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBNEQ3RixnQ0FBVTtBQXREWixNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxvQkFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxnQ0FBZ0MsRUFBRSxDQUFDLENBQUM7QUF1RGpGLGdDQUFVO0FBbERaLE1BQU0sY0FBYyxHQUFHLEdBQUcsRUFBRSxDQUFDLG9CQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQztBQW9EM0Usd0NBQWM7QUE3Q2hCLE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBVyxFQUFFLEVBQUUsQ0FBQyxvQkFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztBQThDN0YsZ0NBQVU7QUE1Q1osTUFBTSxRQUFRLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLG9CQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBbUR2Riw0QkFBUTtBQTlDVixNQUFNLFdBQVcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxvQkFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7QUF3Q2xFLGtDQUFXO0FBbENiLE1BQU0sYUFBYSxHQUFHLENBQUMsRUFBTyxFQUFFLEVBQUUsQ0FBQyxvQkFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxxQkFBcUIsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBdUNwRixzQ0FBYTtBQWxDZixNQUFNLFdBQVcsR0FBRyxDQUFDLE1BQVcsRUFBRSxFQUFFLENBQUMsb0JBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUE4QjVGLGtDQUFXO0FBeEJiLE1BQU0sY0FBYyxHQUFHLENBQUMsTUFBVyxFQUFFLEVBQUUsQ0FBQyxvQkFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztBQXlCbEcsd0NBQWM7QUFuQmhCLE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBVyxFQUFFLEVBQUUsQ0FBQyxvQkFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztBQW9CN0YsZ0NBQVU7QUFkWixNQUFNLFVBQVUsR0FBRyxDQUFDLE1BQVcsRUFBRSxFQUFFLENBQUMsb0JBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFlN0YsZ0NBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIGltcG9ydCBjb25maWcgZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCBodHRwU2VydmVyIGZyb20gJy4vaHR0cFNlcnZlcic7XG5cbmltcG9ydCBVc2VyIGZyb20gJy4uL2ludGVyZmFjZS91c2VyJztcblxuLyoqXG4gKiDku47lvq7kv6Hojrflj5ZvcGVuaWRcbiAqIEBwYXJhbSB7Y29kZTogd3gubG9naW4oKS5jb2RlfVxuICovXG5jb25zdCBnZXRPcGVuaWQgPSAoY29kZTogc3RyaW5nKSA9PiBodHRwU2VydmVyLmdldCh7IHVybDogYC91c2Vycy9vcGVuaWRmcm9td3gvJHtjb2RlfWAgfSk7XG5cbi8vIGNvbnN0IGdldE9wZW5pZCA9IChjb2RlOiBzdHJpbmcpID0+IGh0dHBTZXJ2ZXIuZ2V0KHsgdXJsOiAnL21pbmkvZ2V0T3BlbmlkP2NvZGU9JyArIGNvZGUgfSk7XG5cbi8qKlxuICog5Yib5bu655So5oi3XG4gKiBAcGFyYW0ge3VzZXI6IFVzZXIgfVxuICovXG5jb25zdCBpbnNlcnRVc2VyID0gKHVzZXI6IFVzZXIpID0+IGh0dHBTZXJ2ZXIucG9zdCh7IHVybDogJy91c2VyL2luc2VydFVzZXInLCBkYXRhOiB1c2VyIH0pO1xuXG4vKipcbiAqIOiOt+WPluaYn+W6p+ivpuino1xuICovXG5jb25zdCBnZXRGb3J0dW5lID0gKGZvcnR1bmVOYW1lOiBzdHJpbmcpID0+IGh0dHBTZXJ2ZXIuZ2V0KHsgdXJsOiBgL2ZvcnR1bmUvJHtmb3J0dW5lTmFtZX1gIH0pO1xuXG5cbi8qKlxuICog6I635Y+W5b+D6YeM5rWL6K+V55qE6aKY55uu5YiX6KGoXG4gKi9cbmNvbnN0IGdldFBzeVRlc3QgPSAoKSA9PiBodHRwU2VydmVyLmdldCh7IHVybDogYC9wc3ljaG9sb2dpY2FsLXRlc3QvZ2V0UHN5VGVzdGAgfSk7XG5cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmNvbnN0IGdldEFjY2Vzc1Rva2VuID0gKCkgPT4gaHR0cFNlcnZlci5nZXQoeyB1cmw6ICcvbWluaS9nZXRBY2Nlc3NUb2tlbicgfSk7XG5cblxuLyoqXG4gKiDmm7TmlrDnlKjmiLfkv6Hmga9cbiAqIEBwYXJhbSB7fVxuICovXG5jb25zdCB1cGRhdGVVc2VyID0gKHBhcmFtczogYW55KSA9PiBodHRwU2VydmVyLnBvc3QoeyB1cmw6IGAvdXNlci91cGRhdGVVc2VyYCwgZGF0YTogcGFyYW1zIH0pO1xuXG5jb25zdCByZWdpc3RlciA9ICh1c2VyOiBhbnkpID0+IGh0dHBTZXJ2ZXIucG9zdCh7IHVybDogJy91c2VyL2luc2VydFVzZXInLCBkYXRhOiB1c2VyIH0pO1xuLyoqXG4gKiDojrflj5bnlKjmiLfkv6Hmga9cbiAqIEBwYXJhbSB7fVxuICovXG5jb25zdCBnZXRVc2VySW5mbyA9ICgpID0+IGh0dHBTZXJ2ZXIuZ2V0KHsgdXJsOiBgL3VzZXIvdXNlckluZm9gIH0pO1xuXG4vKipcbiAqIOiOt+WPlueUqOaIt+S/oeaBr1xuICogQHBhcmFtIHt9XG4gKi9cbmNvbnN0IGdldFVzZXJEZXRhaWwgPSAoaWQ6IGFueSkgPT4gaHR0cFNlcnZlci5nZXQoeyB1cmw6IGAvdXNlci91c2VySW5mbz9pZD0ke2lkfWAgfSk7XG4vKipcbiAqIOiOt+WPluWfjuW4guWIl+ihqFxuICogQHBhcmFtIHt9XG4gKi9cbmNvbnN0IGdldENpdHlMaXN0ID0gKHBhcmFtczogYW55KSA9PiBodHRwU2VydmVyLnBvc3QoeyB1cmw6IGAvdXNlci9kaXN0cmljdGAsIGRhdGE6IHBhcmFtcyB9KTtcblxuLyoqXG4gKiDojrflj5bln47luILliJfooahcbiAqIEBwYXJhbSB7fVxuICovXG5jb25zdCBnZXRBbGxEaXN0cmljdCA9IChwYXJhbXM6IGFueSkgPT4gaHR0cFNlcnZlci5wb3N0KHsgdXJsOiBgL3VzZXIvYWxsRGlzdHJpY3RgLCBkYXRhOiBwYXJhbXMgfSk7XG5cbi8qKlxuICog5Yib5bu65bqX6ZO6XG4gKiBAcGFyYW0ge31cbiAqL1xuY29uc3QgY3JlYXRlU2hvcCA9IChwYXJhbXM6IGFueSkgPT4gaHR0cFNlcnZlci5wb3N0KHsgdXJsOiBgL3Nob3AvY3JlYXRlU2hvcGAsIGRhdGE6IHBhcmFtcyB9KTtcblxuLyoqXG4gKiDmm7TmlrDlupfpk7pcbiAqIEBwYXJhbSB7fVxuICovXG5jb25zdCB1cGRhdGVTaG9wID0gKHBhcmFtczogYW55KSA9PiBodHRwU2VydmVyLnBvc3QoeyB1cmw6IGAvc2hvcC91cGRhdGVTaG9wYCwgZGF0YTogcGFyYW1zIH0pO1xuXG5cbmV4cG9ydCB7XG4gIGdldE9wZW5pZCxcbiAgaW5zZXJ0VXNlcixcbiAgZ2V0Rm9ydHVuZSxcbiAgZ2V0UHN5VGVzdCxcblxuICBnZXRBY2Nlc3NUb2tlbixcbiAgdXBkYXRlVXNlcixcbiAgZ2V0VXNlckluZm8sXG4gIGdldENpdHlMaXN0LFxuICBnZXRBbGxEaXN0cmljdCxcbiAgY3JlYXRlU2hvcCxcbiAgdXBkYXRlU2hvcCxcbiAgZ2V0VXNlckRldGFpbCxcbiAgcmVnaXN0ZXIsXG59XG5cbiJdfQ==